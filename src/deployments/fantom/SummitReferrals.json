{
  "address": "0x967D0dF4B951B46642b6168E94A120dF7fdAcCf7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AlreadyReferredByUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CodeNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidLevel",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingReferral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MustBeAtLeastBronze",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReciprocalReferral",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SelfReferral",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_boostLevel",
          "type": "uint256"
        }
      ],
      "name": "BoostedReferrer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_refPointsReq",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_selfPointsReq",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_refsReq",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "_multRew",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_hasReferrerBonusMult",
          "type": "uint256"
        }
      ],
      "name": "UpdatedLevelData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_pointsContract",
          "type": "address"
        }
      ],
      "name": "UpdatedPointsContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_add",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "UpdatedReferrer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BONUS_FOR_BEING_REFERRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LEVEL_MULT_REWARD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LEVEL_REFS_REQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LEVEL_REF_VOLUME_REQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LEVEL_SELF_VOLUME_REQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "REFERRER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "REF_BOOST_LEVEL",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "REF_CODE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "REF_CODE_INV",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "REF_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUMMIT_POINTS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_boostLevel",
          "type": "uint8"
        }
      ],
      "name": "boostReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_level",
          "type": "uint8"
        }
      ],
      "name": "getLevelRequirements",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "selfVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refVolume",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "refsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "name": "getRefVolumeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "name": "getReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "name": "getReferrerLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "name": "getRefsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_add",
          "type": "address"
        }
      ],
      "name": "getSelfVolumeMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "levelCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_refVolumeReq",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_selfVolumeReq",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_refsReq",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_multReward",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_hasReferrerBonusMult",
          "type": "uint256"
        }
      ],
      "name": "setLevelData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pointsContract",
          "type": "address"
        }
      ],
      "name": "setPointsContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "setReferralCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_code",
          "type": "string"
        }
      ],
      "name": "setReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x32c834d9ae28217072a70981e25d59088f82e057f36f3306bd00264564c13637",
  "receipt": {
    "to": null,
    "from": "0x3a7679E3662bC7c2EB2B1E71FA221dA430c6f64B",
    "contractAddress": "0x967D0dF4B951B46642b6168E94A120dF7fdAcCf7",
    "transactionIndex": 0,
    "gasUsed": "2413086",
    "logsBloom": "0x
    "blockHash": "0x000414c500001f5ed4444773bb1ffc2cd65cf9937732dc4918e3afa357a47107",
    "transactionHash": "0x32c834d9ae28217072a70981e25d59088f82e057f36f3306bd00264564c13637",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 76360028,
        "transactionHash": "0x32c834d9ae28217072a70981e25d59088f82e057f36f3306bd00264564c13637",
        "address": "0x967D0dF4B951B46642b6168E94A120dF7fdAcCf7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000414c500001f5ed4444773bb1ffc2cd65cf9937732dc4918e3afa357a47107"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360028,
        "transactionHash": "0x32c834d9ae28217072a70981e25d59088f82e057f36f3306bd00264564c13637",
        "address": "0x967D0dF4B951B46642b6168E94A120dF7fdAcCf7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x000414c500001f5ed4444773bb1ffc2cd65cf9937732dc4918e3afa357a47107"
      }
    ],
    "blockNumber": 76360028,
    "cumulativeGasUsed": "2413086",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "2ddeb07234f840afcfda7d3e3380662b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyReferredByUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CodeNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLevel\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingReferral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeAtLeastBronze\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReciprocalReferral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SelfReferral\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_boostLevel\",\"type\":\"uint256\"}],\"name\":\"BoostedReferrer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_refPointsReq\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_selfPointsReq\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_refsReq\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_multRew\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_hasReferrerBonusMult\",\"type\":\"uint256\"}],\"name\":\"UpdatedLevelData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_pointsContract\",\"type\":\"address\"}],\"name\":\"UpdatedPointsContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"UpdatedReferrer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BONUS_FOR_BEING_REFERRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_MULT_REWARD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_REFS_REQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_REF_VOLUME_REQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LEVEL_SELF_VOLUME_REQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"REFERRER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"REF_BOOST_LEVEL\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"REF_CODE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"REF_CODE_INV\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"REF_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUMMIT_POINTS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_boostLevel\",\"type\":\"uint8\"}],\"name\":\"boostReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_level\",\"type\":\"uint8\"}],\"name\":\"getLevelRequirements\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"selfVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refVolume\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getRefVolumeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getReferrerLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getRefsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"getSelfVolumeMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"levelCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_refVolumeReq\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_selfVolumeReq\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_refsReq\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_multReward\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_hasReferrerBonusMult\",\"type\":\"uint256\"}],\"name\":\"setLevelData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointsContract\",\"type\":\"address\"}],\"name\":\"setPointsContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"setReferralCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_code\",\"type\":\"string\"}],\"name\":\"setReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/SummitReferrals.sol\":\"SummitReferrals\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/contracts/SummitReferrals.sol\":{\"content\":\"//\\n//            __               ___ ___    __            _  \\n//           (_  | | |\\\\/| |\\\\/|  |   |    (_ \\\\    / /\\\\  |_) \\n//           __) |_| |  | |  | _|_  |    __) \\\\/\\\\/ /--\\\\ |   \\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./interface/ISummitReferrals.sol\\\";\\nimport \\\"./interface/ISummitPoints.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\n// | Level    | Custom Benefit  | Reward  | Self Volume Required  | Referred Volume Required  | Referral Num Required   |\\n// | ---      | ---             | ---     | ---                   | ---                       | ---                     |\\n// | Wood     |                 | 0       | 0                     | 0                         | 0                       |\\n// | Bronze   | Can refer       | 2%      | 100                   | 0                         | 0                       |\\n// | Silver   |                 | 4%      | 1000                  | 10000                     | 3                       |\\n// | Gold     |                 | 5%      | 2000                  | 25000                     | 5                       |\\n// | Platinum |                 | 7%      | 5000                  | 100000                    | 10                      |\\n// | Noble    |                 | 15%     | 25000                 | 1000000                   | 25                      |\\n\\ncontract SummitReferrals is Maintainable, ISummitReferrals {\\n    using SafeMath for uint256;\\n\\n    address public SUMMIT_POINTS;\\n\\n    // Level requirements\\n    uint256 public levelCount = 6;\\n    mapping(uint256 => uint256) public LEVEL_REF_VOLUME_REQ; // = [0, 0, 10000e18, 25000e18, 100000e18, 1000000e18];\\n    mapping(uint256 => uint256) public LEVEL_SELF_VOLUME_REQ; // = [0, 100e18, 1000e18, 2000e18, 5000e18, 25000e18];\\n    mapping(uint256 => uint256) public LEVEL_REFS_REQ; // = [0, 0, 3, 5, 10, 25];\\n\\n    mapping(uint256 => uint256) public LEVEL_MULT_REWARD; // = [0, 200, 400, 500, 700, 1500];\\n\\n    uint256 public BONUS_FOR_BEING_REFERRED = 200;\\n    mapping(address => address) public REFERRER;\\n    mapping(address => uint256) public REF_COUNT;\\n    mapping(address => uint8) public REF_BOOST_LEVEL;\\n    mapping(string => address) public REF_CODE;\\n    mapping(address => string) public REF_CODE_INV;\\n\\n    error AlreadyInitialized();\\n    error MissingReferral();\\n    error AlreadyReferredByUser();\\n    error SelfReferral();\\n    error ReciprocalReferral();\\n    error LengthMismatch();\\n    error CodeNotAvailable();\\n    error MustBeAtLeastBronze();\\n    error InvalidLevel();\\n\\n    constructor() {\\n      uint256[6] memory refVolumeReq = [uint256(0), 0, 10000e18, 25000e18, 100000e18, 1000000e18];\\n      uint256[6] memory selfVolumeReq = [uint256(0), 100e18, 1000e18, 2000e18, 5000e18, 25000e18];\\n      uint256[6] memory refsReq = [uint256(0), 0, 3, 5, 10, 25];\\n      uint256[6] memory multReward = [uint256(0), 200, 400, 500, 700, 1500];\\n\\n      for (uint256 i = 0; i < levelCount; i++) {\\n        LEVEL_REF_VOLUME_REQ[i] = refVolumeReq[i];\\n        LEVEL_SELF_VOLUME_REQ[i] = selfVolumeReq[i];\\n        LEVEL_REFS_REQ[i] = refsReq[i];\\n        LEVEL_MULT_REWARD[i] = multReward[i];\\n      }\\n    }\\n\\n    bool public initialized = false;\\n    address public governor;\\n    function initialize(address _governor) public onlyMaintainer {\\n      if (initialized) revert AlreadyInitialized();\\n      initialized = true;\\n\\n      // __BLAST__\\n      // IBlast blast = IBlast(0x4300000000000000000000000000000000000002);\\n      // __BLAST__\\n      // blast.configureClaimableGas();\\n      // __BLAST__\\n      // blast.configureGovernor(_governor);\\n      governor = _governor;\\n    }\\n\\n\\n    function setPointsContract(address _pointsContract) override public onlyMaintainer {\\n      emit UpdatedPointsContract(_pointsContract);\\n      SUMMIT_POINTS = _pointsContract;\\n    }\\n\\n    function stringEquals(string memory s1, string memory s2) internal pure returns(bool) {\\n        return keccak256(abi.encode(s1)) == keccak256(abi.encode(s2));\\n    }\\n\\n    function setReferrer(address _referrer, string memory _code) override public {\\n      // Get referrer from code or argument\\n      address referrer = _referrer == address(0) ? REF_CODE[_code] : _referrer;\\n\\n      // Checks\\n      if (referrer == address(0)) revert MissingReferral();\\n      if (referrer == msg.sender) revert SelfReferral();\\n      if (referrer == REFERRER[msg.sender]) revert AlreadyReferredByUser();\\n      if (REFERRER[referrer] == msg.sender) revert ReciprocalReferral();\\n      if (REFERRER[REFERRER[referrer]] == msg.sender) revert ReciprocalReferral();\\n\\n      // Validate referrer is at least bronze level\\n      if (getReferrerLevel(referrer) == 0) revert MustBeAtLeastBronze();\\n\\n      // Remove from prev referrer count\\n      if (REFERRER[msg.sender] != address(0) && REF_COUNT[REFERRER[msg.sender]] >= 1) {\\n        REF_COUNT[REFERRER[msg.sender]] -= 1;\\n      }\\n\\n      REFERRER[msg.sender] = referrer;\\n      REF_COUNT[referrer] += 1;\\n\\n      emit UpdatedReferrer(msg.sender, referrer);\\n    }\\n\\n    function setReferralCode(string memory _code) override public {\\n      // Validate referrer is at least bronze level\\n      if (getReferrerLevel(msg.sender) == 0) revert MustBeAtLeastBronze();\\n\\n      // If code is already being used\\n      if (REF_CODE[_code] != address(0)) revert CodeNotAvailable();\\n\\n      REF_CODE[REF_CODE_INV[msg.sender]] = address(0);\\n      REF_CODE_INV[msg.sender] = _code;\\n      REF_CODE[_code] = msg.sender;\\n    }\\n\\n    function boostReferrer(address _referrer, uint8 _boostLevel) override public onlyMaintainer {\\n      REF_BOOST_LEVEL[_referrer] = _boostLevel;\\n      emit BoostedReferrer(_referrer, _boostLevel);\\n    }\\n\\n    function setLevelData(uint256[] memory _refVolumeReq, uint256[] memory _selfVolumeReq, uint256[] memory _refsReq, uint256[] memory _multReward, uint256 _hasReferrerBonusMult) override public onlyMaintainer {\\n      if (_refVolumeReq.length != _selfVolumeReq.length || _refVolumeReq.length != _refsReq.length || _refVolumeReq.length != _multReward.length) revert LengthMismatch();\\n\\n      uint256 newLength = _refVolumeReq.length;\\n\\n      for (uint256 i = 0; i < newLength; i++) {\\n        LEVEL_REF_VOLUME_REQ[i] = _refVolumeReq[i];\\n        LEVEL_SELF_VOLUME_REQ[i] = _selfVolumeReq[i];\\n        LEVEL_REFS_REQ[i] = _refsReq[i];\\n        LEVEL_MULT_REWARD[i] = _multReward[i];\\n      }\\n\\n      levelCount = newLength;\\n\\n      BONUS_FOR_BEING_REFERRED = _hasReferrerBonusMult;\\n      emit UpdatedLevelData(_refVolumeReq, _selfVolumeReq, _refsReq, _multReward, _hasReferrerBonusMult);\\n    }\\n\\n    function getReferrer(address _add) override public view returns (address) {\\n      return REFERRER[_add];\\n    }\\n\\n    function getReferrerLevel(address _add) override public view returns (uint8) {\\n      if (REF_BOOST_LEVEL[_add] > 0) {\\n        return REF_BOOST_LEVEL[_add] > (levelCount - 1) ? uint8(levelCount - 1) : REF_BOOST_LEVEL[_add];\\n      }\\n      if (SUMMIT_POINTS == address(0)) return 0;\\n\\n      (uint256 _selfVolume, uint256 _refVolume,) = ISummitPoints(SUMMIT_POINTS).getVolume(_add);\\n\\n      for (uint8 i = 0; i < levelCount; i++) {\\n        if (_selfVolume < LEVEL_SELF_VOLUME_REQ[i + 1]) return i;\\n        if (_refVolume < LEVEL_REF_VOLUME_REQ[i + 1]) return i;\\n        if (REF_COUNT[_add] < LEVEL_REFS_REQ[i + 1]) return i;\\n      }\\n\\n      return uint8(levelCount);\\n    }\\n\\n    function getLevelRequirements(uint8 _level) override public view returns (uint256 selfVolume, uint256 refVolume, uint256 refsCount) {\\n      if (_level >= levelCount) revert InvalidLevel();\\n      return (\\n        LEVEL_SELF_VOLUME_REQ[_level],\\n        LEVEL_REF_VOLUME_REQ[_level],\\n        LEVEL_REFS_REQ[_level]\\n      );\\n    }\\n\\n    function getRefsCount(address _add) override public view returns (uint256) {\\n      return REF_COUNT[_add];\\n    }\\n\\n    function getRefVolumeMultiplier(address _add) override public view returns (uint256) {\\n      return 10000 + (LEVEL_MULT_REWARD[getReferrerLevel(_add)]);\\n    }\\n\\n    function getSelfVolumeMultiplier(address _add) override public view returns (uint256) {\\n      return 10000 + (REFERRER[_add] != address(0) ? BONUS_FOR_BEING_REFERRED : 0);\\n    }\\n}\",\"keccak256\":\"0x4ed9eca042cc7929cdb508f28a18ce1bc8ab2a1b2cc847f00bc675730cceb14e\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\ninterface IBlast {\\n    enum GasMode {\\n        VOID,\\n        CLAIMABLE\\n    }\\n\\n    function configureClaimableGas() external;\\n    function configureGovernor(address governor) external;\\n\\n    function claimAllGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n\\n    function claimGasAtMinClaimRate(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 minClaimRateBips\\n    ) external returns (uint256);\\n\\n    function claimMaxGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n\\n    function claimGas(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 gasToClaim,\\n        uint256 gasSecondsToConsume\\n    ) external returns (uint256);\\n\\n    function readGasParams(\\n        address contractAddress\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 etherSeconds,\\n            uint256 etherBalance,\\n            uint256 lastUpdated,\\n            GasMode\\n        );\\n}\",\"keccak256\":\"0xdde888d7edc290762d82e33b6ab15cd3d47e04a5c7c577bee4c10c997dcd93f1\",\"license\":\"MIT\"},\"src/contracts/interface/ISummitPoints.sol\":{\"content\":\"//\\n//            __               ___ ___    __            _  \\n//           (_  | | |\\\\/| |\\\\/|  |   |    (_ \\\\    / /\\\\  |_) \\n//           __) |_| |  | |  | _|_  |    __) \\\\/\\\\/ /--\\\\ |   \\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface ISummitPoints {\\n  event UpdatedVolumeAdapter(address indexed _volumeAdapter);\\n  event UpdatedReferralsContract(address indexed _referrals);\\n  event UpdatedGlobalBoost(uint256 _boost);\\n  event UpdatedVolumeScalers(uint256 _refVolumeScaler, uint256 _adapterVolumeScaler);\\n  event AddedUserVolume(address indexed _user, uint256 _volume);\\n  event AddedReferrerVolume(address indexed _referrer, address indexed _user, uint256 _volume);\\n  event AddedAdapterVolume(address indexed _adapter, uint256 _volume);\\n  event TransferredVolume(address indexed _caller, address indexed _from, address indexed _to, uint256 _selfVolume, uint256 _refVolume, uint256 _adapterVolume);\\n  event UpdatedDelegate(address indexed _caller, address indexed _user, address indexed _delegate);\\n  event UpdatedAdapterDelegate(address indexed _adapter, address indexed _delegate);\\n\\n  function setVolumeAdapter(address _volumeAdapter) external;\\n  function setReferralsContract(address _referrals) external;\\n  function setGlobalBoost(uint256 _boost) external;\\n  function setVolumeScalers(uint256 _refVolumeScaler, uint256 _adapterVolumeScaler) external;\\n  function setDelegate(address _user, address _delegate) external;\\n  function setAdapterDelegate(address _adapter, address _delegate) external;\\n  function addVolume(address _add, uint256 _volume) external;\\n  function addAdapterVolume(address _adapter, uint256 _volume) external;\\n  function transferVolume(address _from, address _to, uint256 _selfVolume, uint256 _refVolume, uint256 _adapterVolume) external;\\n  function getVolume(address _add) external view returns (uint256 selfVolume, uint256 refVolume, uint256 adapterVolume);\\n  function getPoints(address _add) external view returns (uint256 pointsFromSelf, uint256 pointsFromRef, uint256 pointsFromAdapter, uint256 pointsTotal);\\n}\\n\",\"keccak256\":\"0x497108d50f62d3222352d1bd121b9ffdccf6a563c273a754329a9f9e680efa2d\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/ISummitReferrals.sol\":{\"content\":\"//\\n//            __               ___ ___    __            _  \\n//           (_  | | |\\\\/| |\\\\/|  |   |    (_ \\\\    / /\\\\  |_) \\n//           __) |_| |  | |  | _|_  |    __) \\\\/\\\\/ /--\\\\ |   \\n//\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISummitReferrals {\\n\\n  event UpdatedPointsContract(address indexed _pointsContract);\\n  event BoostedReferrer(address indexed referrer, uint256 _boostLevel);\\n  event UpdatedReferrer(address indexed _add, address indexed _referrer);\\n  event UpdatedLevelData(uint256[] _refPointsReq, uint256[] _selfPointsReq, uint256[] _refsReq, uint256[] _multRew, uint256 _hasReferrerBonusMult);\\n\\n  function setPointsContract(address _pointsContract) external;\\n  function setReferrer(address _referrer, string memory _code) external;\\n  function setReferralCode(string memory _code) external;\\n  function boostReferrer(address _referrer, uint8 _boostLevel) external;\\n  function setLevelData(uint256[] memory _refPointsReq, uint256[] memory _selfPointsReq, uint256[] memory _refsReq, uint256[] memory _multRew, uint256 _hasReferrerBonusMult) external;\\n  function getReferrer(address _add) external view returns (address);\\n  function getRefsCount(address _add) external view returns (uint256);\\n  function getReferrerLevel(address _add) external view returns (uint8);\\n  function getLevelRequirements(uint8 _level) external view returns (uint256 selfVolume, uint256 refVolume, uint256 refsCount);\\n  function getRefVolumeMultiplier(address _add) external view returns (uint256);\\n  function getSelfVolumeMultiplier(address _add) external view returns (uint256);\\n}\",\"keccak256\":\"0x36545efe31ccee939df8deeaa63c23a53b1341165322fa6973298a4c8e54605e\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MAINTAINER_ROLE, msg.sender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        renounceRole(role, msg.sender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(hasRole(MAINTAINER_ROLE, msg.sender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd16da7dc74a778bd150b5580d78ed18bdebdb159e6afddc7470011178dc261a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600660025560c8600755600d805460ff191690553480156200002557600080fd5b5062000033600033620002ad565b6200005f7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9533620002ad565b60006040518060c00160405280600081526020016000815260200169021e19e0c9bab2400000815260200169054b40b1f852bda00000815260200169152d02c7e14af6800000815260200169d3c21bcecceda1000000815250905060006040518060c001604052806000815260200168056bc75e2d631000008152602001683635c9adc5dea000008152602001686c6b935b8bbd400000815260200169010f0cf064dd59200000815260200169054b40b1f852bda00000815250905060006040518060c0016040528060008152602001600081526020016003815260200160058152602001600a81526020016019815250905060006040518060c001604052806000815260200160c8815260200161019081526020016101f481526020016102bc81526020016105dc815250905060005b600254811015620002a257848160068110620001bc57634e487b7160e01b600052603260045260246000fd5b60200201516003600083815260200190815260200160002081905550838160068110620001f957634e487b7160e01b600052603260045260246000fd5b602002015160046000838152602001908152602001600020819055508281600681106200023657634e487b7160e01b600052603260045260246000fd5b602002015160056000838152602001908152602001600020819055508181600681106200027357634e487b7160e01b600052603260045260246000fd5b60209081029190910151600083815260069092526040909120558062000299816200035d565b91505062000190565b505050505062000385565b620002b98282620002bd565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002b9576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620003193390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006000198214156200037e57634e487b7160e01b81526011600452602481fd5b5060010190565b61214b80620003956000396000f3fe608060405234801561001057600080fd5b50600436106102925760003560e01c806386ec3e3d11610160578063bc826e64116100d8578063de2ad91a1161008c578063f874225411610071578063f874225414610665578063fa98b69d1461068c578063fd0dfb85146106ac57600080fd5b8063de2ad91a1461063f578063f2fde38b1461065257600080fd5b8063ce0b6639116100bd578063ce0b6639146105f0578063d547741f14610619578063d8baf7cf1461062c57600080fd5b8063bc826e64146105bd578063c4d66de8146105dd57600080fd5b8063982b6d451161012f578063a217fddf11610114578063a217fddf1461056c578063affb41a014610574578063b8ef9fb31461059457600080fd5b8063982b6d45146105175780639e8d7cd41461054c57600080fd5b806386ec3e3d146104a75780638bb9c5bf146104ba57806391d14854146104cd57806395754abb1461050457600080fd5b80633fe9bba81161020e5780635a3553c9116101c25780636b453c1f116101a75780636b453c1f1461046157806373930f04146104745780637c4e94b51461048757600080fd5b80635a3553c914610424578063651a2b4c1461045857600080fd5b80634c10fb25116101f35780634c10fb25146103c3578063570f61eb146103d657806359ee3c5b1461040457600080fd5b80633fe9bba8146103845780634a9fefc71461039757600080fd5b8063158ef93e116102655780632f2ff15d1161024a5780632f2ff15d1461034957806336568abe1461035e5780633c9c39141461037157600080fd5b8063158ef93e14610319578063248a9ca31461032657600080fd5b806301e6896b1461029757806301ffc9a7146102b3578063080472d2146102d65780630c340a2414610301575b600080fd5b6102a060075481565b6040519081526020015b60405180910390f35b6102c66102c1366004611cc1565b6106bf565b60405190151581526020016102aa565b6001546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016102aa565b600d546102e99061010090046001600160a01b031681565b600d546102c69060ff1681565b6102a0610334366004611c87565b60009081526020819052604090206001015490565b61035c610357366004611c9f565b610758565b005b61035c61036c366004611c9f565b610782565b6102a061037f366004611b3f565b610813565b61035c610392366004611bd7565b610841565b6102e96103a5366004611b3f565b6001600160a01b039081166000908152600860205260409020541690565b61035c6103d1366004611ba5565b610a92565b6103e96103e4366004611d69565b610b81565b604080519384526020840192909252908201526060016102aa565b610417610412366004611b3f565b610bf3565b6040516102aa9190611f55565b6102e9610432366004611d01565b8051602081830181018051600b825292820191909301209152546001600160a01b031681565b6102a060025481565b61035c61046f366004611b3f565b610c8d565b6102a0610482366004611b3f565b610cba565b6102a0610495366004611c87565b60036020526000908152604090205481565b61035c6104b5366004611d01565b610cf2565b61035c6104c8366004611c87565b610e4e565b6102c66104db366004611c9f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61035c610512366004611b3f565b610e58565b61053a610525366004611b3f565b600a6020526000908152604090205460ff1681565b60405160ff90911681526020016102aa565b6102a061055a366004611c87565b60046020526000908152604090205481565b6102a0600081565b6102a0610582366004611c87565b60056020526000908152604090205481565b6102e96105a2366004611b3f565b6008602052600090815260409020546001600160a01b031681565b6102a06105cb366004611b3f565b60096020526000908152604090205481565b61035c6105eb366004611b3f565b610f4a565b6102a06105fe366004611b3f565b6001600160a01b031660009081526009602052604090205490565b61035c610627366004611c9f565b611058565b61035c61063a366004611b3f565b61107d565b61053a61064d366004611b3f565b6110a7565b61035c610660366004611b3f565b6112b6565b6102a07f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6102a061069a366004611c87565b60066020526000908152604090205481565b61035c6106ba366004611b59565b6112cc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061075257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600082815260208190526040902060010154610773816115b1565b61077d83836115bb565b505050565b6001600160a01b03811633146108055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61080f8282611659565b5050565b600060066000610822846110a7565b60ff168152602001908152602001600020546127106107529190611fb9565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166108d05760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b835185511415806108e357508251855114155b806108f057508151855114155b15610927576040517fff633a3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845160005b81811015610a3f5786818151811061095457634e487b7160e01b600052603260045260246000fd5b6020026020010151600360008381526020019081526020016000208190555085818151811061099357634e487b7160e01b600052603260045260246000fd5b602002602001015160046000838152602001908152602001600020819055508481815181106109d257634e487b7160e01b600052603260045260246000fd5b60200260200101516005600083815260200190815260200160002081905550838181518110610a1157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000838152600690925260409091205580610a37816120ae565b91505061092c565b50600281905560078290556040517f562c204f2c2ef9fa88aa881cd4d49bc65849451a4bdb97fad62dc3a5eae6041390610a829088908890889088908890611ef5565b60405180910390a1505050505050565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610b215760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191660ff861690811790915591519182527f3ead3adb8142be5b6d7082c72ef2c40854cde3bba93a27760d7d0d40a0393604910160405180910390a25050565b60008060006002548460ff1610610bc4576040517fd1459f7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060ff16600090815260046020908152604080832054600383528184205460059093529220549192909190565b600c6020526000908152604090208054610c0c90612073565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3890612073565b8015610c855780601f10610c5a57610100808354040283529160200191610c85565b820191906000526020600020905b815481529060010190602001808311610c6857829003601f168201915b505050505081565b610cb77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610758565b50565b6001600160a01b03818116600090815260086020526040812054909116610ce2576000610ce6565b6007545b61075290612710611fb9565b610cfb336110a7565b60ff16610d1b576040516338b729c360e11b815260040160405180910390fd5b60006001600160a01b0316600b82604051610d369190611dbd565b908152604051908190036020019020546001600160a01b031614610d86576040517f25a86aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408082209051600b91610da491611dd9565b9081526040805160209281900383019020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039490941693909317909255336000908152600c8252919091208251610dfd9284019061198b565b5033600b82604051610e0f9190611dbd565b90815260405190819003602001902080546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff1990921691909117905550565b610cb78133610782565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610ee75760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b6040516001600160a01b038216907fc44f7b4fe9d29c078d207864fd556e8b68e1759e3ac4ee9cece99d2ec03c27c690600090a26001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610fd95760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b600d5460ff1615611016576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80546001600160a01b03909216610100027fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b600082815260208190526040902060010154611073816115b1565b61077d8383611659565b610cb77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611058565b6001600160a01b0381166000908152600a602052604081205460ff16156111285760016002546110d79190612015565b6001600160a01b0383166000908152600a602052604090205460ff1611611119576001600160a01b0382166000908152600a602052604090205460ff16610752565b60016002546107529190612015565b6001546001600160a01b031661114057506000919050565b6001546040517f8ba17f860000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526000928392911690638ba17f869060240160606040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611d3c565b509150915060005b6002548160ff1610156112aa57600460006111fe836001611fd1565b60ff1681526020019081526020016000205483101561121f57949350505050565b6003600061122e836001611fd1565b60ff1681526020019081526020016000205482101561124f57949350505050565b6005600061125e836001611fd1565b60ff16815260208082019290925260409081016000908120546001600160a01b038916825260099093522054101561129857949350505050565b806112a2816120c9565b9150506111e2565b50506002549392505050565b6112c1600082610758565b610cb7600033610782565b60006001600160a01b038316156112e3578261130d565b600b826040516112f39190611dbd565b908152604051908190036020019020546001600160a01b03165b90506001600160a01b03811661134f576040517fcd2d66aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116331415611392576040517f55e8f70e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600860205260409020546001600160a01b03828116911614156113e7576040517ffe1ffa9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03818116600090815260086020526040902054163314156114225760405163b6ea0b0160e01b815260040160405180910390fd5b6001600160a01b038181166000908152600860205260408082205483168252902054163314156114655760405163b6ea0b0160e01b815260040160405180910390fd5b61146e816110a7565b60ff1661148e576040516338b729c360e11b815260040160405180910390fd5b336000908152600860205260409020546001600160a01b0316158015906114db5750336000908152600860209081526040808320546001600160a01b031683526009909152902054600111155b1561151c57336000908152600860209081526040808320546001600160a01b0316835260099091528120805460019290611516908490612015565b90915550505b336000908152600860209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155835260099091528120805460019290611571908490611fb9565b90915550506040516001600160a01b0382169033907f82ca166ebb8d22637409e8fcca994e7e1b757a1e28f0ee91f4defe3cff1e919390600090a3505050565b610cb781336116d8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561080f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576117098161174b565b61171483602061175d565b604051602001611725929190611e74565b60408051601f198184030181529082905262461bcd60e51b82526107fc91600401611f55565b60606107526001600160a01b03831660145b6060600061176c836002611ff6565b611777906002611fb9565b67ffffffffffffffff81111561179d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117c7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061180c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061186557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611889846002611ff6565b611894906001611fb9565b90505b6001811115611935577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118e357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061190757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361192e8161205c565b9050611897565b5083156119845760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fc565b9392505050565b82805461199790612073565b90600052602060002090601f0160209004810192826119b957600085556119ff565b82601f106119d257805160ff19168380011785556119ff565b828001600101855582156119ff579182015b828111156119ff5782518255916020019190600101906119e4565b50611a0b929150611a0f565b5090565b5b80821115611a0b5760008155600101611a10565b80356001600160a01b0381168114611a3b57600080fd5b919050565b600082601f830112611a50578081fd5b8135602067ffffffffffffffff821115611a6c57611a6c6120ff565b8160051b611a7b828201611f88565b838152828101908684018388018501891015611a95578687fd5b8693505b85841015611ab7578035835260019390930192918401918401611a99565b50979650505050505050565b600082601f830112611ad3578081fd5b813567ffffffffffffffff811115611aed57611aed6120ff565b611b00601f8201601f1916602001611f88565b818152846020838601011115611b14578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114611a3b57600080fd5b600060208284031215611b50578081fd5b61198482611a24565b60008060408385031215611b6b578081fd5b611b7483611a24565b9150602083013567ffffffffffffffff811115611b8f578182fd5b611b9b85828601611ac3565b9150509250929050565b60008060408385031215611bb7578182fd5b611bc083611a24565b9150611bce60208401611b2e565b90509250929050565b600080600080600060a08688031215611bee578081fd5b853567ffffffffffffffff80821115611c05578283fd5b611c1189838a01611a40565b96506020880135915080821115611c26578283fd5b611c3289838a01611a40565b95506040880135915080821115611c47578283fd5b611c5389838a01611a40565b94506060880135915080821115611c68578283fd5b50611c7588828901611a40565b95989497509295608001359392505050565b600060208284031215611c98578081fd5b5035919050565b60008060408385031215611cb1578182fd5b82359150611bce60208401611a24565b600060208284031215611cd2578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611984578182fd5b600060208284031215611d12578081fd5b813567ffffffffffffffff811115611d28578182fd5b611d3484828501611ac3565b949350505050565b600080600060608486031215611d50578283fd5b8351925060208401519150604084015190509250925092565b600060208284031215611d7a578081fd5b61198482611b2e565b6000815180845260208085019450808401835b83811015611db257815187529582019590820190600101611d96565b509495945050505050565b60008251611dcf81846020870161202c565b9190910192915050565b600080835482600182811c915080831680611df557607f831692505b6020808410821415611e1557634e487b7160e01b87526022600452602487fd5b818015611e295760018114611e3a57611e66565b60ff19861689528489019650611e66565b60008a815260209020885b86811015611e5e5781548b820152908501908301611e45565b505084890196505b509498975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611eac81601785016020880161202c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611ee981602884016020880161202c565b01602801949350505050565b60a081526000611f0860a0830188611d83565b8281036020840152611f1a8188611d83565b90508281036040840152611f2e8187611d83565b90508281036060840152611f428186611d83565b9150508260808301529695505050505050565b6020815260008251806020840152611f7481604085016020870161202c565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fb157611fb16120ff565b604052919050565b60008219821115611fcc57611fcc6120e9565b500190565b600060ff821660ff84168060ff03821115611fee57611fee6120e9565b019392505050565b6000816000190483118215151615612010576120106120e9565b500290565b600082821015612027576120276120e9565b500390565b60005b8381101561204757818101518382015260200161202f565b83811115612056576000848401525b50505050565b60008161206b5761206b6120e9565b506000190190565b600181811c9082168061208757607f821691505b602082108114156120a857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156120c2576120c26120e9565b5060010190565b600060ff821660ff8114156120e0576120e06120e9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122044fff8f81500431d11b2f78126a590d6f4548096f9873bd62fd7d5c5b39f19f364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c806386ec3e3d11610160578063bc826e64116100d8578063de2ad91a1161008c578063f874225411610071578063f874225414610665578063fa98b69d1461068c578063fd0dfb85146106ac57600080fd5b8063de2ad91a1461063f578063f2fde38b1461065257600080fd5b8063ce0b6639116100bd578063ce0b6639146105f0578063d547741f14610619578063d8baf7cf1461062c57600080fd5b8063bc826e64146105bd578063c4d66de8146105dd57600080fd5b8063982b6d451161012f578063a217fddf11610114578063a217fddf1461056c578063affb41a014610574578063b8ef9fb31461059457600080fd5b8063982b6d45146105175780639e8d7cd41461054c57600080fd5b806386ec3e3d146104a75780638bb9c5bf146104ba57806391d14854146104cd57806395754abb1461050457600080fd5b80633fe9bba81161020e5780635a3553c9116101c25780636b453c1f116101a75780636b453c1f1461046157806373930f04146104745780637c4e94b51461048757600080fd5b80635a3553c914610424578063651a2b4c1461045857600080fd5b80634c10fb25116101f35780634c10fb25146103c3578063570f61eb146103d657806359ee3c5b1461040457600080fd5b80633fe9bba8146103845780634a9fefc71461039757600080fd5b8063158ef93e116102655780632f2ff15d1161024a5780632f2ff15d1461034957806336568abe1461035e5780633c9c39141461037157600080fd5b8063158ef93e14610319578063248a9ca31461032657600080fd5b806301e6896b1461029757806301ffc9a7146102b3578063080472d2146102d65780630c340a2414610301575b600080fd5b6102a060075481565b6040519081526020015b60405180910390f35b6102c66102c1366004611cc1565b6106bf565b60405190151581526020016102aa565b6001546102e9906001600160a01b031681565b6040516001600160a01b0390911681526020016102aa565b600d546102e99061010090046001600160a01b031681565b600d546102c69060ff1681565b6102a0610334366004611c87565b60009081526020819052604090206001015490565b61035c610357366004611c9f565b610758565b005b61035c61036c366004611c9f565b610782565b6102a061037f366004611b3f565b610813565b61035c610392366004611bd7565b610841565b6102e96103a5366004611b3f565b6001600160a01b039081166000908152600860205260409020541690565b61035c6103d1366004611ba5565b610a92565b6103e96103e4366004611d69565b610b81565b604080519384526020840192909252908201526060016102aa565b610417610412366004611b3f565b610bf3565b6040516102aa9190611f55565b6102e9610432366004611d01565b8051602081830181018051600b825292820191909301209152546001600160a01b031681565b6102a060025481565b61035c61046f366004611b3f565b610c8d565b6102a0610482366004611b3f565b610cba565b6102a0610495366004611c87565b60036020526000908152604090205481565b61035c6104b5366004611d01565b610cf2565b61035c6104c8366004611c87565b610e4e565b6102c66104db366004611c9f565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b61035c610512366004611b3f565b610e58565b61053a610525366004611b3f565b600a6020526000908152604090205460ff1681565b60405160ff90911681526020016102aa565b6102a061055a366004611c87565b60046020526000908152604090205481565b6102a0600081565b6102a0610582366004611c87565b60056020526000908152604090205481565b6102e96105a2366004611b3f565b6008602052600090815260409020546001600160a01b031681565b6102a06105cb366004611b3f565b60096020526000908152604090205481565b61035c6105eb366004611b3f565b610f4a565b6102a06105fe366004611b3f565b6001600160a01b031660009081526009602052604090205490565b61035c610627366004611c9f565b611058565b61035c61063a366004611b3f565b61107d565b61053a61064d366004611b3f565b6110a7565b61035c610660366004611b3f565b6112b6565b6102a07f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b6102a061069a366004611c87565b60066020526000908152604090205481565b61035c6106ba366004611b59565b6112cc565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061075257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b600082815260208190526040902060010154610773816115b1565b61077d83836115bb565b505050565b6001600160a01b03811633146108055760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61080f8282611659565b5050565b600060066000610822846110a7565b60ff168152602001908152602001600020546127106107529190611fb9565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166108d05760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b835185511415806108e357508251855114155b806108f057508151855114155b15610927576040517fff633a3800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b845160005b81811015610a3f5786818151811061095457634e487b7160e01b600052603260045260246000fd5b6020026020010151600360008381526020019081526020016000208190555085818151811061099357634e487b7160e01b600052603260045260246000fd5b602002602001015160046000838152602001908152602001600020819055508481815181106109d257634e487b7160e01b600052603260045260246000fd5b60200260200101516005600083815260200190815260200160002081905550838181518110610a1157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516000838152600690925260409091205580610a37816120ae565b91505061092c565b50600281905560078290556040517f562c204f2c2ef9fa88aa881cd4d49bc65849451a4bdb97fad62dc3a5eae6041390610a829088908890889088908890611ef5565b60405180910390a1505050505050565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610b215760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b6001600160a01b0382166000818152600a6020908152604091829020805460ff191660ff861690811790915591519182527f3ead3adb8142be5b6d7082c72ef2c40854cde3bba93a27760d7d0d40a0393604910160405180910390a25050565b60008060006002548460ff1610610bc4576040517fd1459f7900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505060ff16600090815260046020908152604080832054600383528184205460059093529220549192909190565b600c6020526000908152604090208054610c0c90612073565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3890612073565b8015610c855780601f10610c5a57610100808354040283529160200191610c85565b820191906000526020600020905b815481529060010190602001808311610c6857829003601f168201915b505050505081565b610cb77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610758565b50565b6001600160a01b03818116600090815260086020526040812054909116610ce2576000610ce6565b6007545b61075290612710611fb9565b610cfb336110a7565b60ff16610d1b576040516338b729c360e11b815260040160405180910390fd5b60006001600160a01b0316600b82604051610d369190611dbd565b908152604051908190036020019020546001600160a01b031614610d86576040517f25a86aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600c60205260408082209051600b91610da491611dd9565b9081526040805160209281900383019020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039490941693909317909255336000908152600c8252919091208251610dfd9284019061198b565b5033600b82604051610e0f9190611dbd565b90815260405190819003602001902080546001600160a01b039290921673ffffffffffffffffffffffffffffffffffffffff1990921691909117905550565b610cb78133610782565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610ee75760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b6040516001600160a01b038216907fc44f7b4fe9d29c078d207864fd556e8b68e1759e3ac4ee9cece99d2ec03c27c690600090a26001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610fd95760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016107fc565b600d5460ff1615611016576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d80546001600160a01b03909216610100027fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b600082815260208190526040902060010154611073816115b1565b61077d8383611659565b610cb77f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611058565b6001600160a01b0381166000908152600a602052604081205460ff16156111285760016002546110d79190612015565b6001600160a01b0383166000908152600a602052604090205460ff1611611119576001600160a01b0382166000908152600a602052604090205460ff16610752565b60016002546107529190612015565b6001546001600160a01b031661114057506000919050565b6001546040517f8ba17f860000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526000928392911690638ba17f869060240160606040518083038186803b1580156111a257600080fd5b505afa1580156111b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111da9190611d3c565b509150915060005b6002548160ff1610156112aa57600460006111fe836001611fd1565b60ff1681526020019081526020016000205483101561121f57949350505050565b6003600061122e836001611fd1565b60ff1681526020019081526020016000205482101561124f57949350505050565b6005600061125e836001611fd1565b60ff16815260208082019290925260409081016000908120546001600160a01b038916825260099093522054101561129857949350505050565b806112a2816120c9565b9150506111e2565b50506002549392505050565b6112c1600082610758565b610cb7600033610782565b60006001600160a01b038316156112e3578261130d565b600b826040516112f39190611dbd565b908152604051908190036020019020546001600160a01b03165b90506001600160a01b03811661134f576040517fcd2d66aa00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b038116331415611392576040517f55e8f70e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336000908152600860205260409020546001600160a01b03828116911614156113e7576040517ffe1ffa9500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03818116600090815260086020526040902054163314156114225760405163b6ea0b0160e01b815260040160405180910390fd5b6001600160a01b038181166000908152600860205260408082205483168252902054163314156114655760405163b6ea0b0160e01b815260040160405180910390fd5b61146e816110a7565b60ff1661148e576040516338b729c360e11b815260040160405180910390fd5b336000908152600860205260409020546001600160a01b0316158015906114db5750336000908152600860209081526040808320546001600160a01b031683526009909152902054600111155b1561151c57336000908152600860209081526040808320546001600160a01b0316835260099091528120805460019290611516908490612015565b90915550505b336000908152600860209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038616908117909155835260099091528120805460019290611571908490611fb9565b90915550506040516001600160a01b0382169033907f82ca166ebb8d22637409e8fcca994e7e1b757a1e28f0ee91f4defe3cff1e919390600090a3505050565b610cb781336116d8565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556116153390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff161561080f576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661080f576117098161174b565b61171483602061175d565b604051602001611725929190611e74565b60408051601f198184030181529082905262461bcd60e51b82526107fc91600401611f55565b60606107526001600160a01b03831660145b6060600061176c836002611ff6565b611777906002611fb9565b67ffffffffffffffff81111561179d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156117c7576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061180c57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061186557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000611889846002611ff6565b611894906001611fb9565b90505b6001811115611935577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106118e357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061190757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361192e8161205c565b9050611897565b5083156119845760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016107fc565b9392505050565b82805461199790612073565b90600052602060002090601f0160209004810192826119b957600085556119ff565b82601f106119d257805160ff19168380011785556119ff565b828001600101855582156119ff579182015b828111156119ff5782518255916020019190600101906119e4565b50611a0b929150611a0f565b5090565b5b80821115611a0b5760008155600101611a10565b80356001600160a01b0381168114611a3b57600080fd5b919050565b600082601f830112611a50578081fd5b8135602067ffffffffffffffff821115611a6c57611a6c6120ff565b8160051b611a7b828201611f88565b838152828101908684018388018501891015611a95578687fd5b8693505b85841015611ab7578035835260019390930192918401918401611a99565b50979650505050505050565b600082601f830112611ad3578081fd5b813567ffffffffffffffff811115611aed57611aed6120ff565b611b00601f8201601f1916602001611f88565b818152846020838601011115611b14578283fd5b816020850160208301379081016020019190915292915050565b803560ff81168114611a3b57600080fd5b600060208284031215611b50578081fd5b61198482611a24565b60008060408385031215611b6b578081fd5b611b7483611a24565b9150602083013567ffffffffffffffff811115611b8f578182fd5b611b9b85828601611ac3565b9150509250929050565b60008060408385031215611bb7578182fd5b611bc083611a24565b9150611bce60208401611b2e565b90509250929050565b600080600080600060a08688031215611bee578081fd5b853567ffffffffffffffff80821115611c05578283fd5b611c1189838a01611a40565b96506020880135915080821115611c26578283fd5b611c3289838a01611a40565b95506040880135915080821115611c47578283fd5b611c5389838a01611a40565b94506060880135915080821115611c68578283fd5b50611c7588828901611a40565b95989497509295608001359392505050565b600060208284031215611c98578081fd5b5035919050565b60008060408385031215611cb1578182fd5b82359150611bce60208401611a24565b600060208284031215611cd2578081fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611984578182fd5b600060208284031215611d12578081fd5b813567ffffffffffffffff811115611d28578182fd5b611d3484828501611ac3565b949350505050565b600080600060608486031215611d50578283fd5b8351925060208401519150604084015190509250925092565b600060208284031215611d7a578081fd5b61198482611b2e565b6000815180845260208085019450808401835b83811015611db257815187529582019590820190600101611d96565b509495945050505050565b60008251611dcf81846020870161202c565b9190910192915050565b600080835482600182811c915080831680611df557607f831692505b6020808410821415611e1557634e487b7160e01b87526022600452602487fd5b818015611e295760018114611e3a57611e66565b60ff19861689528489019650611e66565b60008a815260209020885b86811015611e5e5781548b820152908501908301611e45565b505084890196505b509498975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351611eac81601785016020880161202c565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351611ee981602884016020880161202c565b01602801949350505050565b60a081526000611f0860a0830188611d83565b8281036020840152611f1a8188611d83565b90508281036040840152611f2e8187611d83565b90508281036060840152611f428186611d83565b9150508260808301529695505050505050565b6020815260008251806020840152611f7481604085016020870161202c565b601f01601f19169190910160400192915050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611fb157611fb16120ff565b604052919050565b60008219821115611fcc57611fcc6120e9565b500190565b600060ff821660ff84168060ff03821115611fee57611fee6120e9565b019392505050565b6000816000190483118215151615612010576120106120e9565b500290565b600082821015612027576120276120e9565b500390565b60005b8381101561204757818101518382015260200161202f565b83811115612056576000848401525b50505050565b60008161206b5761206b6120e9565b506000190190565b600181811c9082168061208757607f821691505b602082108114156120a857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156120c2576120c26120e9565b5060010190565b600060ff821660ff8114156120e0576120e06120e9565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122044fff8f81500431d11b2f78126a590d6f4548096f9873bd62fd7d5c5b39f19f364736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2376,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "SUMMIT_POINTS",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2379,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "levelCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2383,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "LEVEL_REF_VOLUME_REQ",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2387,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "LEVEL_SELF_VOLUME_REQ",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2391,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "LEVEL_REFS_REQ",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2395,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "LEVEL_MULT_REWARD",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2398,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "BONUS_FOR_BEING_REFERRED",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2402,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "REFERRER",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2406,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "REF_COUNT",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2410,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "REF_BOOST_LEVEL",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 2414,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "REF_CODE",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 2418,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "REF_CODE_INV",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 2555,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "initialized",
        "offset": 0,
        "slot": "13",
        "type": "t_bool"
      },
      {
        "astId": 2557,
        "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
        "label": "governor",
        "offset": 1,
        "slot": "13",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/SummitReferrals.sol:SummitReferrals",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}