{
  "address": "0x9cFeD283B5De1D1Db54000c9141001b4c2C24Eb9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "SummitAdapterSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "removePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
  "receipt": {
    "to": null,
    "from": "0x3a7679E3662bC7c2EB2B1E71FA221dA430c6f64B",
    "contractAddress": "0x9cFeD283B5De1D1Db54000c9141001b4c2C24Eb9",
    "transactionIndex": 0,
    "gasUsed": "3813030",
    "logsBloom": "0x
    "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34",
    "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x9cFeD283B5De1D1Db54000c9141001b4c2C24Eb9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x9cFeD283B5De1D1Db54000c9141001b4c2C24Eb9",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b",
          "0x0000000000000000000000003a7679e3662bc7c2eb2b1e71fa221da430c6f64b"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x9cFeD283B5De1D1Db54000c9141001b4c2C24Eb9",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000061a80",
        "logIndex": 2,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x04068DA6C83AFCFA0e13ba15A6696662335D5B75",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9",
          "0x00000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9ce"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9",
          "0x00000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9ce"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x1B6382DBDEa11d97f24495C9A90b7c88469134a4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9",
          "0x00000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9ce"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x28a92dde19D9989F39A49905d7C9C2FAc7799bDf",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9",
          "0x00000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9ce"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 76360015,
        "transactionHash": "0x442ed103dd6feeb890f7bd9d41bbd76dd7937869c343d3e7dc91b3ca1531fad3",
        "address": "0x8b7007E1D02d8387B7B4BC8C6172598780ae59B2",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009cfed283b5de1d1db54000c9141001b4c2c24eb9",
          "0x00000000000000000000000020dd72ed959b6147912c2e529f0a0c651c33c9ce"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x000414c500001de094456f48ba86d1085df8935c5c96b7f1bb1c16a2014cff34"
      }
    ],
    "blockNumber": 76360015,
    "cumulativeGasUsed": "3813030",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BeethovenxAdapter",
    "0x20dd72Ed959b6147912C2e529F0a0C651c33c9ce",
    [
      "0xcdF68a4d525Ba2E90Fe959c74330430A5a6b8226",
      "0x46E578B73a95e62423CE26056aa750bB9D99be32",
      "0x26Fa2e6E489b10669ACe976B5815508943D2a8E3"
    ],
    400000
  ],
  "solcInputHash": "d9a23d9c2ab6bce658562183b4c28cc2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"SummitAdapterSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/BalancerV2Adapter.sol\":\"BalancerV2Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/contracts/SummitAdapter.sol\":{\"content\":\"//\\n//            __               ___ ___    __            _  \\n//           (_  | | |\\\\/| |\\\\/|  |   |    (_ \\\\    / /\\\\  |_) \\n//           __) |_| |  | |  | _|_  |    __) \\\\/\\\\/ /--\\\\ |   \\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./interface/IBlast.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract SummitAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    event SummitAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    error AlreadyInitialized();\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    bool public initialized = false;\\n    address public governor;\\n    function initialize(address _governor) public onlyMaintainer {\\n        if (initialized) revert AlreadyInitialized();\\n        initialized = true;\\n\\n        // __BLAST__\\n        // IBlast blast = IBlast(0x4300000000000000000000000000000000000002);\\n        // __BLAST__\\n        // blast.configureClaimableGas();\\n        // __BLAST__\\n        // blast.configureGovernor(_governor);\\n\\n        governor = _governor;\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"SummitAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"SummitAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit SummitAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x95cb3bcad3111981f0e06fc7dc6ecd9c23acdebfab1111a1890258a2ffd42f4a\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/BalancerV2Adapter.sol\":{\"content\":\"//\\n//            __               ___ ___    __            _  \\n//           (_  | | |\\\\/| |\\\\/|  |   |    (_ \\\\    / /\\\\  |_) \\n//           __) |_| |  | |  | _|_  |    __) \\\\/\\\\/ /--\\\\ |   \\n//\\n\\n// Supports Balancerlike pools\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\nimport \\\"../SummitAdapter.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/IBasePool.sol\\\";\\nimport \\\"../interface/IMinimalSwapInfoPool.sol\\\";\\n\\ncontract BalancerV2Adapter is SummitAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public vault;\\n\\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\\n    mapping(address => mapping(address => address[])) internal tokensToPools;\\n\\n    constructor(\\n        string memory _name,\\n        address _vault,\\n        address[] memory _pools,\\n        uint256 _swapGasEstimate\\n    ) SummitAdapter(_name, _swapGasEstimate) {\\n        vault = _vault;\\n        addPools(_pools);\\n    }\\n\\n    function addPools(address[] memory _pools) public onlyMaintainer {\\n        for (uint128 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                poolToTokenIndex[pool][token] = j;\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        tokensToPools[token][address(tokens[k])].push(pool);\\n                        _approveIfNeeded(token, UINT_MAX);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function removePools(address[] memory _pools) public onlyMaintainer {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        address[] memory currentPools = tokensToPools[token][address(tokens[k])];\\n                        for (uint128 l = 0; l < currentPools.length; l++) {\\n                            if (currentPools[l] == pool) {\\n                                delete currentPools[l];\\n                            }\\n                        }\\n                        tokensToPools[token][address(tokens[k])] = currentPools;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function getPools(address tokenIn, address tokenOut) public view returns (address[] memory) {\\n        return tokensToPools[tokenIn][tokenOut];\\n    }\\n\\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\\n        if (allowance < _amount) {\\n            IERC20(_tokenIn).safeApprove(vault, _amount);\\n        }\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256) {\\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\\n            return 0;\\n        }\\n\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n        if (pools.length == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 amountOut) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\\n        return amountOut;\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n\\n        require(pools.length > 0, \\\"No pools for swapping\\\");\\n\\n        (address pool, ) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\\n\\n        require(pool != address(0), \\\"Undefined pool\\\");\\n\\n        IVault.SingleSwap memory swap;\\n        swap.poolId = IBasePool(pool).getPoolId();\\n        swap.kind = IVault.SwapKind.GIVEN_IN;\\n        swap.assetIn = _tokenIn;\\n        swap.assetOut = _tokenOut;\\n        swap.amount = _amountIn;\\n        swap.userData = \\\"0x\\\";\\n\\n        IVault.FundManagement memory fund;\\n        fund.sender = address(this);\\n        fund.recipient = payable(to);\\n        fund.fromInternalBalance = false;\\n        fund.toInternalBalance = false;\\n\\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\\n    }\\n\\n    function _getBestPoolForSwap(\\n        address[] memory pools,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (address bestPool, uint256 amountOut) {\\n        amountOut = 0;\\n        bestPool = address(0);\\n        for (uint128 i; i < pools.length; i++) {\\n            address pool = pools[i];\\n            if (pool == address(0)) {\\n                continue;\\n            }\\n            IPoolSwapStructs.SwapRequest memory request;\\n            request.poolId = IBasePool(pool).getPoolId();\\n            request.kind = IVault.SwapKind.GIVEN_IN;\\n            request.tokenIn = IERC20(_tokenIn);\\n            request.tokenOut = IERC20(_tokenOut);\\n            request.amount = _amountIn;\\n            request.userData = \\\"0x\\\";\\n            uint256 newAmountOut = _getAmountOut(request, pool);\\n            if (newAmountOut > amountOut) {\\n                amountOut = newAmountOut;\\n                bestPool = pool;\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(IPoolSwapStructs.SwapRequest memory request, address pool)\\n        internal\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(request.poolId);\\n        uint256 tokenInTotal = balances[poolToTokenIndex[pool][address(request.tokenIn)]];\\n        uint256 tokenOutTotal = balances[poolToTokenIndex[pool][address(request.tokenOut)]];\\n        amountOut = _getAmountOutSafe(request, tokenInTotal, tokenOutTotal, pool);\\n    }\\n\\n    function _getAmountOutSafe(\\n        IPoolSwapStructs.SwapRequest memory request,\\n        uint256 tokenInTotal,\\n        uint256 tokenOutTotal,\\n        address pool\\n    ) internal view returns (uint256) {\\n        try IMinimalSwapInfoPool(pool).onSwap(request, tokenInTotal, tokenOutTotal) returns (uint256 amountOut) {\\n            return amountOut;\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x0d7464627c2d5e7aaf02825f629f3bbd93c44ab272d770d65ec7436d79418adb\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\ninterface IBasePool is IPoolSwapStructs {\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6b3254c58e38a8a0410fe6f58e149b3a6721bb212b5ebac69cf73fec46dc184\",\"license\":\"MIT\"},\"src/contracts/interface/IBlast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.16;\\n\\ninterface IBlast {\\n    enum GasMode {\\n        VOID,\\n        CLAIMABLE\\n    }\\n\\n    function configureClaimableGas() external;\\n    function configureGovernor(address governor) external;\\n\\n    function claimAllGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n\\n    function claimGasAtMinClaimRate(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 minClaimRateBips\\n    ) external returns (uint256);\\n\\n    function claimMaxGas(\\n        address contractAddress,\\n        address recipientOfGas\\n    ) external returns (uint256);\\n\\n    function claimGas(\\n        address contractAddress,\\n        address recipientOfGas,\\n        uint256 gasToClaim,\\n        uint256 gasSecondsToConsume\\n    ) external returns (uint256);\\n\\n    function readGasParams(\\n        address contractAddress\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 etherSeconds,\\n            uint256 etherBalance,\\n            uint256 lastUpdated,\\n            GasMode\\n        );\\n}\",\"keccak256\":\"0xdde888d7edc290762d82e33b6ab15cd3d47e04a5c7c577bee4c10c997dcd93f1\",\"license\":\"MIT\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8332a2b87ff073289f907f1bdf37d64c950d8df6f080c62eae31856eae046a34\",\"license\":\"MIT\"},\"src/contracts/interface/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9c01182800df94716af7a86d69bb6ad563c5f99d9e51e619109c3a86beb684d9\",\"license\":\"MIT\"},\"src/contracts/interface/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xfebf103280e30701430ecd3780bfffba7279f8395393f8ede1a1777e00ea968e\",\"license\":\"MIT\"},\"src/contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IVault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0xbd448fa34dd5cfc23565cc1496a3ed5259e9ea6d13654266f6e3a86d6156e95b\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(MAINTAINER_ROLE, msg.sender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        renounceRole(role, msg.sender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        require(hasRole(MAINTAINER_ROLE, msg.sender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xd16da7dc74a778bd150b5580d78ed18bdebdb159e6afddc7470011178dc261a8\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526003805460ff191690553480156200001b57600080fd5b5060405162003d6e38038062003d6e8339810160408190526200003e9162000c4d565b83816200004d600033620000c1565b620000797f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9533620000c1565b6200008482620000d1565b6200008f816200013a565b5050600480546001600160a01b0319166001600160a01b038516179055620000b78262000235565b5050505062000e6e565b620000cd828262000598565b5050565b8051620001255760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d6500000000000000000000000060448201526064015b60405180910390fd5b8051620000cd90600290602084019062000991565b33600090815260008051602062003d2e833981519152602052604090205460ff16620001a95760405162461bcd60e51b8152602060048201526028602482015260008051602062003d4e83398151915260448201526734b73a30b4b732b960c11b60648201526084016200011c565b80620001f85760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d61746500000000000000000000000060448201526064016200011c565b600181905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a250565b33600090815260008051602062003d2e833981519152602052604090205460ff16620002a45760405162461bcd60e51b8152602060048201526028602482015260008051602062003d4e83398151915260448201526734b73a30b4b732b960c11b60648201526084016200011c565b60005b8151816001600160801b03161015620000cd57600082826001600160801b031681518110620002e657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032c57600080fd5b505afa15801562000341573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000367919062000c34565b60048054604051631f29a8cd60e31b81529182018390529192506000916001600160a01b03169063f94d46689060240160006040518083038186803b158015620003b057600080fd5b505afa158015620003c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003ef919081019062000b2f565b5050905060005b8151816001600160801b031610156200057e57600082826001600160801b0316815181106200043557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600584526040808220928416825291909352822080546001600160801b0319166001600160801b03861617905591505b8351816001600160801b031610156200056657806001600160801b0316836001600160801b03161462000551576001600160a01b0382166000908152600660205260408120855190919086906001600160801b038516908110620004f557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600090812080546001810182559082529190200180546001600160a01b031916918816919091179055620005518260001962000638565b806200055d8162000e0b565b91505062000481565b50508080620005759062000e0b565b915050620003f6565b5050505080806200058f9062000e0b565b915050620002a7565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000cd576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620005f43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b0390811660248301526000919084169063dd62ed3e9060440160206040518083038186803b1580156200068a57600080fd5b505afa1580156200069f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c5919062000c34565b905081811015620006f857600454620006f8906001600160a01b03858116911684620006fd602090811b6200179517901c565b505050565b8015806200078b5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156200074e57600080fd5b505afa15801562000763573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000789919062000c34565b155b620007ff5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016200011c565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620006f89185916200085716565b600080836001600160a01b03168360405162000874919062000d28565b6000604051808303816000865af19150503d8060008114620008b3576040519150601f19603f3d011682016040523d82523d6000602084013e620008b8565b606091505b5091509150816200090c5760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016200011c565b8051156200098b57808060200190518101906200092a919062000c0b565b6200098b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016200011c565b50505050565b8280546200099f9062000dce565b90600052602060002090601f016020900481019282620009c3576000855562000a0e565b82601f10620009de57805160ff191683800117855562000a0e565b8280016001018555821562000a0e579182015b8281111562000a0e578251825591602001919060010190620009f1565b5062000a1c92915062000a20565b5090565b5b8082111562000a1c576000815560010162000a21565b805162000a448162000e55565b919050565b600082601f83011262000a5a578081fd5b8151602062000a7362000a6d8362000d79565b62000d46565b80838252828201915082860187848660051b890101111562000a93578586fd5b855b8581101562000abe57815162000aab8162000e55565b8452928401929084019060010162000a95565b5090979650505050505050565b600082601f83011262000adc578081fd5b8151602062000aef62000a6d8362000d79565b80838252828201915082860187848660051b890101111562000b0f578586fd5b855b8581101562000abe5781518452928401929084019060010162000b11565b60008060006060848603121562000b44578283fd5b83516001600160401b038082111562000b5b578485fd5b818601915086601f83011262000b6f578485fd5b8151602062000b8262000a6d8362000d79565b8083825282820191508286018b848660051b890101111562000ba257898afd5b8996505b8487101562000bd157805162000bbc8162000e55565b83526001969096019591830191830162000ba6565b509189015191975090935050508082111562000beb578384fd5b5062000bfa8682870162000acb565b925050604084015190509250925092565b60006020828403121562000c1d578081fd5b8151801515811462000c2d578182fd5b9392505050565b60006020828403121562000c46578081fd5b5051919050565b6000806000806080858703121562000c63578081fd5b84516001600160401b038082111562000c7a578283fd5b818701915087601f83011262000c8e578283fd5b81518181111562000ca35762000ca362000e3f565b62000cb8601f8201601f191660200162000d46565b81815289602083860101111562000ccd578485fd5b62000ce082602083016020870162000d9f565b965062000cf290506020880162000a37565b9450604087015191508082111562000d08578283fd5b5062000d178782880162000a49565b606096909601519497939650505050565b6000825162000d3c81846020870162000d9f565b9190910192915050565b604051601f8201601f191681016001600160401b038111828210171562000d715762000d7162000e3f565b604052919050565b60006001600160401b0382111562000d955762000d9562000e3f565b5060051b60200190565b60005b8381101562000dbc57818101518382015260200162000da2565b838111156200098b5750506000910152565b600181811c9082168062000de357607f821691505b6020821081141562000e0557634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b038281168082141562000e3557634e487b7160e01b83526011600452602483fd5b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000e6b57600080fd5b50565b612eb08062000e7e6000396000f3fe6080604052600436106101b05760003560e01c806384a33e63116100ec578063d547741f1161008a578063ef99893a11610064578063ef99893a14610506578063f2fde38b14610526578063f874225414610546578063fbfa77cf1461057a57600080fd5b8063d547741f146104a6578063d8baf7cf146104c6578063eab90da6146104e657600080fd5b806391d14854116100c657806391d148541461040d578063a217fddf14610451578063b36a4ab114610466578063c4d66de81461048657600080fd5b806384a33e63146103ad5780638980f11f146103cd5780638bb9c5bf146103ed57600080fd5b806336568abe116101595780635b1dc86f116101335780635b1dc86f1461032a57806369cff80d146103575780636b453c1f1461036d5780637ae267731461038d57600080fd5b806336568abe146102ca5780634b164140146102ea5780634ebb79161461030a57600080fd5b8063158ef93e1161018a578063158ef93e14610250578063248a9ca31461026a5780632f2ff15d146102a857600080fd5b806301ffc9a7146101bc57806306fdde03146101f15780630c340a241461021357600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612940565b61059a565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610603565b6040516101e89190612b3f565b34801561021f57600080fd5b506003546102389061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b34801561025c57600080fd5b506003546101dc9060ff1681565b34801561027657600080fd5b5061029a6102853660046128ec565b60009081526020819052604090206001015490565b6040519081526020016101e8565b3480156102b457600080fd5b506102c86102c336600461291c565b610691565b005b3480156102d657600080fd5b506102c86102e536600461291c565b6106bb565b3480156102f657600080fd5b506102c8610305366004612761565b61074c565b34801561031657600080fd5b506102c86103253660046128ec565b610bc1565b34801561033657600080fd5b5061034a6103453660046126fe565b610d12565b6040516101e89190612af2565b34801561036357600080fd5b5061029a60015481565b34801561037957600080fd5b506102c86103883660046126e2565b610d95565b34801561039957600080fd5b506102c86103a83660046126fe565b610dc2565b3480156103b957600080fd5b506102c86103c83660046128ec565b610e66565b3480156103d957600080fd5b506102c86103e8366004612736565b610f79565b3480156103f957600080fd5b506102c86104083660046128ec565b6110bd565b34801561041957600080fd5b506101dc61042836600461291c565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561045d57600080fd5b5061029a600081565b34801561047257600080fd5b506102c8610481366004612761565b6110c7565b34801561049257600080fd5b506102c86104a13660046126e2565b611446565b3480156104b257600080fd5b506102c86104c136600461291c565b611554565b3480156104d257600080fd5b506102c86104e13660046126e2565b611579565b3480156104f257600080fd5b506102c86105013660046129a9565b6115a3565b34801561051257600080fd5b5061029a610521366004612968565b611768565b34801561053257600080fd5b506102c86105413660046126e2565b61177f565b34801561055257600080fd5b5061029a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b34801561058657600080fd5b50600454610238906001600160a01b031681565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806105fd57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002805461061090612dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461063c90612dbc565b80156106895780601f1061065e57610100808354040283529160200191610689565b820191906000526020600020905b81548152906001019060200180831161066c57829003601f168201915b505050505081565b6000828152602081905260409020600101546106ac81611921565b6106b6838361192b565b505050565b6001600160a01b038116331461073e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61074882826119c9565b5050565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166107db5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60005b815181101561074857600082828151811061080957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190612904565b60048054604051631f29a8cd60e31b81529182018390529192506000916001600160a01b03169063f94d46689060240160006040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090a91908101906127fd565b5050905060005b8151816001600160801b03161015610baa57600082826001600160801b03168151811061094e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b8351816001600160801b03161015610b9557806001600160801b0316836001600160801b031614610b83576001600160a01b03821660009081526006602052604081208551829087906001600160801b0386169081106109cb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610a4757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a29575b5050505050905060005b8151816001600160801b03161015610afe57876001600160a01b031682826001600160801b031681518110610a9657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610aec5781816001600160801b031681518110610ad657634e487b7160e01b600052603260045260246000fd5b6020026020010160006001600160a01b03168152505b80610af681612df7565b915050610a51565b506001600160a01b0383166000908152600660205260408120865183929088906001600160801b038716908110610b4557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610b809291906125ec565b50505b80610b8d81612df7565b91505061095b565b50508080610ba290612df7565b915050610911565b505050508080610bb990612e1e565b9150506107de565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610c505760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60008111610caa5760405162461bcd60e51b815260206004820152602160248201527f53756d6d6974416461707465723a204e6f7468696e6720746f207265636f76656044820152603960f91b6064820152608401610735565b604051339082156108fc029083906000818181858888f19350505050158015610cd7573d6000803e3d6000fd5b506040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a250565b6001600160a01b038083166000908152600660209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610d8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d6a575b5050505050905092915050565b610dbf7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610691565b50565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e515760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b6107486001600160a01b038316826000611795565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610ef55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b80610f425760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606401610735565b600181905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610d07565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166110085760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b600081116110625760405162461bcd60e51b815260206004820152602160248201527f53756d6d6974416461707465723a204e6f7468696e6720746f207265636f76656044820152603960f91b6064820152608401610735565b6110766001600160a01b0383163383611a48565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516110b191815260200190565b60405180910390a25050565b610dbf81336106bb565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166111565760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60005b8151816001600160801b0316101561074857600082826001600160801b03168151811061119657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190612904565b60048054604051631f29a8cd60e31b81529182018390529192506000916001600160a01b03169063f94d46689060240160006040518083038186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129791908101906127fd565b5050905060005b8151816001600160801b0316101561142f57600082826001600160801b0316815181106112db57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600584526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b0316101561141a57806001600160801b0316836001600160801b031614611408576001600160a01b0382166000908152600660205260408120855190919086906001600160801b0385169081106113a157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff191691881691909117905561140882600019611a91565b8061141281612df7565b915050611330565b5050808061142790612df7565b91505061129e565b50505050808061143e90612df7565b915050611159565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166114d55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60035460ff1615611512576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380546001600160a01b03909216610100027fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b60008281526020819052604090206001015461156f81611921565b6106b683836119c9565b610dbf7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611554565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b1580156115e857600080fd5b505afa1580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190612904565b905061162f8686868686611b3e565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190612904565b6116b79190612d62565b9050858110156117095760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606401610735565b836001600160a01b0316856001600160a01b03167f939010b59d536f8f4cc3cdfe2d1e624dfa5ce6282e0f5a42e8f252c538e29c9a8989604051611757929190918252602082015260400190565b60405180910390a350505050505050565b6000611775848484611dd1565b90505b9392505050565b61178a600082610691565b610dbf6000336106bb565b80158061181e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190612904565b155b6118905760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610735565b6040516001600160a01b0383166024820152604481018290526106b69084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611e39565b610dbf8133611f7b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610748576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610748576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0383166024820152604481018290526106b69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016118d5565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b0390811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190612904565b9050818110156106b6576004546106b6906001600160a01b03858116911684611795565b6000611b4a8484610d12565b90506000815111611b9d5760405162461bcd60e51b815260206004820152601560248201527f4e6f20706f6f6c7320666f72207377617070696e6700000000000000000000006044820152606401610735565b6000611bab8286868a611fee565b5090506001600160a01b038116611c045760405162461bcd60e51b815260206004820152600e60248201527f556e646566696e656420706f6f6c0000000000000000000000000000000000006044820152606401610735565b611c506040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8957600080fd5b505afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190612904565b8152600060208083018290526001600160a01b0388811660408086019190915288821660608087019190915260808087018e9052825180840184526002815261060f60f31b8187015260a088015282519081018352938401859052830193909352308252868116828401526004805493517f52bbbe290000000000000000000000000000000000000000000000000000000081529293909116916352bbbe2991611d7391869186918e91429101612b52565b602060405180830381600087803b158015611d8d57600080fd5b505af1158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612904565b50505050505050505050565b6000831580611df15750816001600160a01b0316836001600160a01b0316145b15611dfe57506000611778565b6000611e0a8484610d12565b9050805160001415611e20576000915050611778565b6000611e2e82868689611fee565b979650505050505050565b600080836001600160a01b031683604051611e549190612a55565b6000604051808303816000865af19150503d8060008114611e91576040519150601f19603f3d011682016040523d82523d6000602084013e611e96565b606091505b509150915081611ee85760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610735565b805115611f755780806020019051810190611f0391906128cc565b611f755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610735565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661074857611fac816121a2565b611fb78360206121b4565b604051602001611fc8929190612a71565b60408051601f198184030181529082905262461bcd60e51b825261073591600401612b3f565b600080805b8651816001600160801b0316101561219857600087826001600160801b03168151811061203057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561205b5750612186565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120df57600080fd5b505afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190612904565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b9181019190915261010083015261217182846123db565b905084811115612182578094508295505b5050505b8061219081612df7565b915050611ff3565b5094509492505050565b60606105fd6001600160a01b03831660145b606060006121c3836002612d43565b6121ce906002612d2b565b67ffffffffffffffff8111156121f457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561221e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061226357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122bc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122e0846002612d43565b6122eb906001612d2b565b90505b600181111561238c577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061233a57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061235e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361238581612da5565b90506122ee565b5083156117785760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610735565b600480546080840151604051631f29a8cd60e31b81529283015260009182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261246191908101906127fd565b506001600160a01b0380861660009081526005602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b039091169081106124c057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0380871660009081526005845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061252457634e487b7160e01b600052603260045260246000fd5b6020026020010151905061253a86838388612544565b9695505050505050565b6040517f9d2c110c0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690639d2c110c9061259090889088908890600401612c0f565b60206040518083038186803b1580156125a857600080fd5b505afa9250505080156125d8575060408051601f3d908101601f191682019092526125d591810190612904565b60015b6125e1576125e4565b90505b949350505050565b82805482825590600052602060002090810192821561264e579160200282015b8281111561264e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061260c565b5061265a92915061265e565b5090565b5b8082111561265a576000815560010161265f565b600082601f830112612683578081fd5b8151602061269861269383612d07565b612cd6565b80838252828201915082860187848660051b89010111156126b7578586fd5b855b858110156126d5578151845292840192908401906001016126b9565b5090979650505050505050565b6000602082840312156126f3578081fd5b813561177881612e65565b60008060408385031215612710578081fd5b823561271b81612e65565b9150602083013561272b81612e65565b809150509250929050565b60008060408385031215612748578182fd5b823561275381612e65565b946020939093013593505050565b60006020808385031215612773578182fd5b823567ffffffffffffffff811115612789578283fd5b8301601f81018513612799578283fd5b80356127a761269382612d07565b80828252848201915084840188868560051b87010111156127c6578687fd5b8694505b838510156127f15780356127dd81612e65565b8352600194909401939185019185016127ca565b50979650505050505050565b600080600060608486031215612811578081fd5b835167ffffffffffffffff80821115612828578283fd5b818601915086601f83011261283b578283fd5b8151602061284b61269383612d07565b8083825282820191508286018b848660051b890101111561286a578788fd5b8796505b8487101561289557805161288181612e65565b83526001969096019591830191830161286e565b50918901519197509093505050808211156128ae578283fd5b506128bb86828701612673565b925050604084015190509250925092565b6000602082840312156128dd578081fd5b81518015158114611778578182fd5b6000602082840312156128fd578081fd5b5035919050565b600060208284031215612915578081fd5b5051919050565b6000806040838503121561292e578182fd5b82359150602083013561272b81612e65565b600060208284031215612951578081fd5b81356001600160e01b031981168114611778578182fd5b60008060006060848603121561297c578081fd5b83359250602084013561298e81612e65565b9150604084013561299e81612e65565b809150509250925092565b600080600080600060a086880312156129c0578283fd5b853594506020860135935060408601356129d981612e65565b925060608601356129e981612e65565b915060808601356129f981612e65565b809150509295509295909350565b60008151808452612a1f816020860160208601612d79565b601f01601f19169290920160200192915050565b60028110612a5157634e487b7160e01b600052602160045260246000fd5b9052565b60008251612a67818460208701612d79565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612aa9816017850160208801612d79565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612ae6816028840160208801612d79565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612b335783516001600160a01b031683529284019291840191600101612b0e565b50909695505050505050565b6020815260006117786020830184612a07565b60e08152845160e082015260006020860151612b72610100840182612a33565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612bbb6101a0840182612a07565b915050612bfd60208301866001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60a082019390935260c0015292915050565b60608152612c21606082018551612a33565b60006020850151612c3d60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120612c92818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050612cc3610180840182612a07565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cff57612cff612e4f565b604052919050565b600067ffffffffffffffff821115612d2157612d21612e4f565b5060051b60200190565b60008219821115612d3e57612d3e612e39565b500190565b6000816000190483118215151615612d5d57612d5d612e39565b500290565b600082821015612d7457612d74612e39565b500390565b60005b83811015612d94578181015183820152602001612d7c565b83811115611f755750506000910152565b600081612db457612db4612e39565b506000190190565b600181811c90821680612dd057607f821691505b60208210811415612df157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415612e1457612e14612e39565b6001019392505050565b6000600019821415612e3257612e32612e39565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dbf57600080fdfea26469706673582212205fefaf729acaef22956b79598acde84c910e41c8a1f07b6ee2bfe02fcecaf6eb64736f6c63430008040033a54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d394d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d61",
  "deployedBytecode": "0x6080604052600436106101b05760003560e01c806384a33e63116100ec578063d547741f1161008a578063ef99893a11610064578063ef99893a14610506578063f2fde38b14610526578063f874225414610546578063fbfa77cf1461057a57600080fd5b8063d547741f146104a6578063d8baf7cf146104c6578063eab90da6146104e657600080fd5b806391d14854116100c657806391d148541461040d578063a217fddf14610451578063b36a4ab114610466578063c4d66de81461048657600080fd5b806384a33e63146103ad5780638980f11f146103cd5780638bb9c5bf146103ed57600080fd5b806336568abe116101595780635b1dc86f116101335780635b1dc86f1461032a57806369cff80d146103575780636b453c1f1461036d5780637ae267731461038d57600080fd5b806336568abe146102ca5780634b164140146102ea5780634ebb79161461030a57600080fd5b8063158ef93e1161018a578063158ef93e14610250578063248a9ca31461026a5780632f2ff15d146102a857600080fd5b806301ffc9a7146101bc57806306fdde03146101f15780630c340a241461021357600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d7366004612940565b61059a565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b50610206610603565b6040516101e89190612b3f565b34801561021f57600080fd5b506003546102389061010090046001600160a01b031681565b6040516001600160a01b0390911681526020016101e8565b34801561025c57600080fd5b506003546101dc9060ff1681565b34801561027657600080fd5b5061029a6102853660046128ec565b60009081526020819052604090206001015490565b6040519081526020016101e8565b3480156102b457600080fd5b506102c86102c336600461291c565b610691565b005b3480156102d657600080fd5b506102c86102e536600461291c565b6106bb565b3480156102f657600080fd5b506102c8610305366004612761565b61074c565b34801561031657600080fd5b506102c86103253660046128ec565b610bc1565b34801561033657600080fd5b5061034a6103453660046126fe565b610d12565b6040516101e89190612af2565b34801561036357600080fd5b5061029a60015481565b34801561037957600080fd5b506102c86103883660046126e2565b610d95565b34801561039957600080fd5b506102c86103a83660046126fe565b610dc2565b3480156103b957600080fd5b506102c86103c83660046128ec565b610e66565b3480156103d957600080fd5b506102c86103e8366004612736565b610f79565b3480156103f957600080fd5b506102c86104083660046128ec565b6110bd565b34801561041957600080fd5b506101dc61042836600461291c565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561045d57600080fd5b5061029a600081565b34801561047257600080fd5b506102c8610481366004612761565b6110c7565b34801561049257600080fd5b506102c86104a13660046126e2565b611446565b3480156104b257600080fd5b506102c86104c136600461291c565b611554565b3480156104d257600080fd5b506102c86104e13660046126e2565b611579565b3480156104f257600080fd5b506102c86105013660046129a9565b6115a3565b34801561051257600080fd5b5061029a610521366004612968565b611768565b34801561053257600080fd5b506102c86105413660046126e2565b61177f565b34801561055257600080fd5b5061029a7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b34801561058657600080fd5b50600454610238906001600160a01b031681565b60006001600160e01b031982167f7965db0b0000000000000000000000000000000000000000000000000000000014806105fd57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002805461061090612dbc565b80601f016020809104026020016040519081016040528092919081815260200182805461063c90612dbc565b80156106895780601f1061065e57610100808354040283529160200191610689565b820191906000526020600020905b81548152906001019060200180831161066c57829003601f168201915b505050505081565b6000828152602081905260409020600101546106ac81611921565b6106b6838361192b565b505050565b6001600160a01b038116331461073e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b61074882826119c9565b5050565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166107db5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60005b815181101561074857600082828151811061080957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561084e57600080fd5b505afa158015610862573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108869190612904565b60048054604051631f29a8cd60e31b81529182018390529192506000916001600160a01b03169063f94d46689060240160006040518083038186803b1580156108ce57600080fd5b505afa1580156108e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261090a91908101906127fd565b5050905060005b8151816001600160801b03161015610baa57600082826001600160801b03168151811061094e57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b8351816001600160801b03161015610b9557806001600160801b0316836001600160801b031614610b83576001600160a01b03821660009081526006602052604081208551829087906001600160801b0386169081106109cb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610a4757602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610a29575b5050505050905060005b8151816001600160801b03161015610afe57876001600160a01b031682826001600160801b031681518110610a9657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610aec5781816001600160801b031681518110610ad657634e487b7160e01b600052603260045260246000fd5b6020026020010160006001600160a01b03168152505b80610af681612df7565b915050610a51565b506001600160a01b0383166000908152600660205260408120865183929088906001600160801b038716908110610b4557634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610b809291906125ec565b50505b80610b8d81612df7565b91505061095b565b50508080610ba290612df7565b915050610911565b505050508080610bb990612e1e565b9150506107de565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610c505760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60008111610caa5760405162461bcd60e51b815260206004820152602160248201527f53756d6d6974416461707465723a204e6f7468696e6720746f207265636f76656044820152603960f91b6064820152608401610735565b604051339082156108fc029083906000818181858888f19350505050158015610cd7573d6000803e3d6000fd5b506040518181526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a250565b6001600160a01b038083166000908152600660209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610d8857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d6a575b5050505050905092915050565b610dbf7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610691565b50565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e515760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b6107486001600160a01b038316826000611795565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610ef55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b80610f425760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d6174650000000000000000000000006044820152606401610735565b600181905560405181815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610d07565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166110085760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b600081116110625760405162461bcd60e51b815260206004820152602160248201527f53756d6d6974416461707465723a204e6f7468696e6720746f207265636f76656044820152603960f91b6064820152608401610735565b6110766001600160a01b0383163383611a48565b816001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28826040516110b191815260200190565b60405180910390a25050565b610dbf81336106bb565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166111565760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60005b8151816001600160801b0316101561074857600082826001600160801b03168151811061119657634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156111db57600080fd5b505afa1580156111ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112139190612904565b60048054604051631f29a8cd60e31b81529182018390529192506000916001600160a01b03169063f94d46689060240160006040518083038186803b15801561125b57600080fd5b505afa15801561126f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129791908101906127fd565b5050905060005b8151816001600160801b0316101561142f57600082826001600160801b0316815181106112db57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600584526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b0316101561141a57806001600160801b0316836001600160801b031614611408576001600160a01b0382166000908152600660205260408120855190919086906001600160801b0385169081106113a157634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff191691881691909117905561140882600019611a91565b8061141281612df7565b915050611330565b5050808061142790612df7565b91505061129e565b50505050808061143e90612df7565b915050611159565b3360009081527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166114d55760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b6064820152608401610735565b60035460ff1615611512576040517f0dc149f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600380546001600160a01b03909216610100027fffffffffffffffffffffff000000000000000000000000000000000000000000909216919091176001179055565b60008281526020819052604090206001015461156f81611921565b6106b683836119c9565b610dbf7f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582611554565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b1580156115e857600080fd5b505afa1580156115fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116209190612904565b905061162f8686868686611b3e565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b15801561167557600080fd5b505afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190612904565b6116b79190612d62565b9050858110156117095760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f75740000000000000000006044820152606401610735565b836001600160a01b0316856001600160a01b03167f939010b59d536f8f4cc3cdfe2d1e624dfa5ce6282e0f5a42e8f252c538e29c9a8989604051611757929190918252602082015260400190565b60405180910390a350505050505050565b6000611775848484611dd1565b90505b9392505050565b61178a600082610691565b610dbf6000336106bb565b80158061181e5750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190612904565b155b6118905760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610735565b6040516001600160a01b0383166024820152604481018290526106b69084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611e39565b610dbf8133611f7b565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16610748576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556119853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1615610748576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0383166024820152604481018290526106b69084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064016118d5565b60048054604051636eb1769f60e11b815230928101929092526001600160a01b0390811660248301526000919084169063dd62ed3e9060440160206040518083038186803b158015611ae257600080fd5b505afa158015611af6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b1a9190612904565b9050818110156106b6576004546106b6906001600160a01b03858116911684611795565b6000611b4a8484610d12565b90506000815111611b9d5760405162461bcd60e51b815260206004820152601560248201527f4e6f20706f6f6c7320666f72207377617070696e6700000000000000000000006044820152606401610735565b6000611bab8286868a611fee565b5090506001600160a01b038116611c045760405162461bcd60e51b815260206004820152600e60248201527f556e646566696e656420706f6f6c0000000000000000000000000000000000006044820152606401610735565b611c506040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611c8957600080fd5b505afa158015611c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc19190612904565b8152600060208083018290526001600160a01b0388811660408086019190915288821660608087019190915260808087018e9052825180840184526002815261060f60f31b8187015260a088015282519081018352938401859052830193909352308252868116828401526004805493517f52bbbe290000000000000000000000000000000000000000000000000000000081529293909116916352bbbe2991611d7391869186918e91429101612b52565b602060405180830381600087803b158015611d8d57600080fd5b505af1158015611da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc59190612904565b50505050505050505050565b6000831580611df15750816001600160a01b0316836001600160a01b0316145b15611dfe57506000611778565b6000611e0a8484610d12565b9050805160001415611e20576000915050611778565b6000611e2e82868689611fee565b979650505050505050565b600080836001600160a01b031683604051611e549190612a55565b6000604051808303816000865af19150503d8060008114611e91576040519150601f19603f3d011682016040523d82523d6000602084013e611e96565b606091505b509150915081611ee85760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65646044820152606401610735565b805115611f755780806020019051810190611f0391906128cc565b611f755760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610735565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff1661074857611fac816121a2565b611fb78360206121b4565b604051602001611fc8929190612a71565b60408051601f198184030181529082905262461bcd60e51b825261073591600401612b3f565b600080805b8651816001600160801b0316101561219857600087826001600160801b03168151811061203057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b0316141561205b5750612186565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156120df57600080fd5b505afa1580156120f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121179190612904565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b9181019190915261010083015261217182846123db565b905084811115612182578094508295505b5050505b8061219081612df7565b915050611ff3565b5094509492505050565b60606105fd6001600160a01b03831660145b606060006121c3836002612d43565b6121ce906002612d2b565b67ffffffffffffffff8111156121f457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561221e576020820181803683370190505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061226357634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000816001815181106122bc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060006122e0846002612d43565b6122eb906001612d2b565b90505b600181111561238c577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061233a57634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061235e57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c9361238581612da5565b90506122ee565b5083156117785760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610735565b600480546080840151604051631f29a8cd60e31b81529283015260009182916001600160a01b03169063f94d46689060240160006040518083038186803b15801561242557600080fd5b505afa158015612439573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261246191908101906127fd565b506001600160a01b0380861660009081526005602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b039091169081106124c057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0380871660009081526005845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061252457634e487b7160e01b600052603260045260246000fd5b6020026020010151905061253a86838388612544565b9695505050505050565b6040517f9d2c110c0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690639d2c110c9061259090889088908890600401612c0f565b60206040518083038186803b1580156125a857600080fd5b505afa9250505080156125d8575060408051601f3d908101601f191682019092526125d591810190612904565b60015b6125e1576125e4565b90505b949350505050565b82805482825590600052602060002090810192821561264e579160200282015b8281111561264e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390911617825560209092019160019091019061260c565b5061265a92915061265e565b5090565b5b8082111561265a576000815560010161265f565b600082601f830112612683578081fd5b8151602061269861269383612d07565b612cd6565b80838252828201915082860187848660051b89010111156126b7578586fd5b855b858110156126d5578151845292840192908401906001016126b9565b5090979650505050505050565b6000602082840312156126f3578081fd5b813561177881612e65565b60008060408385031215612710578081fd5b823561271b81612e65565b9150602083013561272b81612e65565b809150509250929050565b60008060408385031215612748578182fd5b823561275381612e65565b946020939093013593505050565b60006020808385031215612773578182fd5b823567ffffffffffffffff811115612789578283fd5b8301601f81018513612799578283fd5b80356127a761269382612d07565b80828252848201915084840188868560051b87010111156127c6578687fd5b8694505b838510156127f15780356127dd81612e65565b8352600194909401939185019185016127ca565b50979650505050505050565b600080600060608486031215612811578081fd5b835167ffffffffffffffff80821115612828578283fd5b818601915086601f83011261283b578283fd5b8151602061284b61269383612d07565b8083825282820191508286018b848660051b890101111561286a578788fd5b8796505b8487101561289557805161288181612e65565b83526001969096019591830191830161286e565b50918901519197509093505050808211156128ae578283fd5b506128bb86828701612673565b925050604084015190509250925092565b6000602082840312156128dd578081fd5b81518015158114611778578182fd5b6000602082840312156128fd578081fd5b5035919050565b600060208284031215612915578081fd5b5051919050565b6000806040838503121561292e578182fd5b82359150602083013561272b81612e65565b600060208284031215612951578081fd5b81356001600160e01b031981168114611778578182fd5b60008060006060848603121561297c578081fd5b83359250602084013561298e81612e65565b9150604084013561299e81612e65565b809150509250925092565b600080600080600060a086880312156129c0578283fd5b853594506020860135935060408601356129d981612e65565b925060608601356129e981612e65565b915060808601356129f981612e65565b809150509295509295909350565b60008151808452612a1f816020860160208601612d79565b601f01601f19169290920160200192915050565b60028110612a5157634e487b7160e01b600052602160045260246000fd5b9052565b60008251612a67818460208701612d79565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351612aa9816017850160208801612d79565b7f206973206d697373696e6720726f6c65200000000000000000000000000000006017918401918201528351612ae6816028840160208801612d79565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612b335783516001600160a01b031683529284019291840191600101612b0e565b50909695505050505050565b6020815260006117786020830184612a07565b60e08152845160e082015260006020860151612b72610100840182612a33565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612bbb6101a0840182612a07565b915050612bfd60208301866001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60a082019390935260c0015292915050565b60608152612c21606082018551612a33565b60006020850151612c3d60808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120612c92818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050612cc3610180840182612a07565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612cff57612cff612e4f565b604052919050565b600067ffffffffffffffff821115612d2157612d21612e4f565b5060051b60200190565b60008219821115612d3e57612d3e612e39565b500190565b6000816000190483118215151615612d5d57612d5d612e39565b500290565b600082821015612d7457612d74612e39565b500390565b60005b83811015612d94578181015183820152602001612d7c565b83811115611f755750506000910152565b600081612db457612db4612e39565b506000190190565b600181811c90821680612dd057607f821691505b60208210811415612df157634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415612e1457612e14612e39565b6001019392505050565b6000600019821415612e3257612e32612e39565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610dbf57600080fdfea26469706673582212205fefaf729acaef22956b79598acde84c910e41c8a1f07b6ee2bfe02fcecaf6eb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 2288,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2290,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2333,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "initialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 2335,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "governor",
        "offset": 1,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4949,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4955,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "poolToTokenIndex",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint128))"
      },
      {
        "astId": 4962,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "tokensToPools",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint128)"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}