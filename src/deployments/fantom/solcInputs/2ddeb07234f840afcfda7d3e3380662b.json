{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "src/contracts/interface/IAdapter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAdapter {\n    function name() external view returns (string memory);\n\n    function swapGasEstimate() external view returns (uint256);\n\n    function swap(\n        uint256,\n        uint256,\n        address,\n        address,\n        address\n    ) external;\n\n    function query(\n        uint256,\n        address,\n        address\n    ) external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/IBlast.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.16;\n\ninterface IBlast {\n    enum GasMode {\n        VOID,\n        CLAIMABLE\n    }\n\n    function configureClaimableGas() external;\n    function configureGovernor(address governor) external;\n\n    function claimAllGas(\n        address contractAddress,\n        address recipientOfGas\n    ) external returns (uint256);\n\n    function claimGasAtMinClaimRate(\n        address contractAddress,\n        address recipientOfGas,\n        uint256 minClaimRateBips\n    ) external returns (uint256);\n\n    function claimMaxGas(\n        address contractAddress,\n        address recipientOfGas\n    ) external returns (uint256);\n\n    function claimGas(\n        address contractAddress,\n        address recipientOfGas,\n        uint256 gasToClaim,\n        uint256 gasSecondsToConsume\n    ) external returns (uint256);\n\n    function readGasParams(\n        address contractAddress\n    )\n        external\n        view\n        returns (\n            uint256 etherSeconds,\n            uint256 etherBalance,\n            uint256 lastUpdated,\n            GasMode\n        );\n}"
    },
    "src/contracts/interface/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    event Approval(address, address, uint256);\n    event Transfer(address, address, uint256);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n\n    function transferFrom(\n        address,\n        address,\n        uint256\n    ) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address, uint256) external returns (bool);\n\n    function transfer(address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\n\n    function permit(\n        address,\n        address,\n        uint256,\n        uint256,\n        uint8,\n        bytes32,\n        bytes32\n    ) external; // Only tokens that support permit\n\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\n\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\n\n    function totalSupply() external view returns (uint256);\n}\n"
    },
    "src/contracts/interface/ISummitPoints.sol": {
      "content": "//\n//            __               ___ ___    __            _  \n//           (_  | | |\\/| |\\/|  |   |    (_ \\    / /\\  |_) \n//           __) |_| |  | |  | _|_  |    __) \\/\\/ /--\\ |   \n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\n\ninterface ISummitPoints {\n  event UpdatedVolumeAdapter(address indexed _volumeAdapter);\n  event UpdatedReferralsContract(address indexed _referrals);\n  event UpdatedGlobalBoost(uint256 _boost);\n  event UpdatedVolumeScalers(uint256 _refVolumeScaler, uint256 _adapterVolumeScaler);\n  event AddedUserVolume(address indexed _user, uint256 _volume);\n  event AddedReferrerVolume(address indexed _referrer, address indexed _user, uint256 _volume);\n  event AddedAdapterVolume(address indexed _adapter, uint256 _volume);\n  event TransferredVolume(address indexed _caller, address indexed _from, address indexed _to, uint256 _selfVolume, uint256 _refVolume, uint256 _adapterVolume);\n  event UpdatedDelegate(address indexed _caller, address indexed _user, address indexed _delegate);\n  event UpdatedAdapterDelegate(address indexed _adapter, address indexed _delegate);\n\n  function setVolumeAdapter(address _volumeAdapter) external;\n  function setReferralsContract(address _referrals) external;\n  function setGlobalBoost(uint256 _boost) external;\n  function setVolumeScalers(uint256 _refVolumeScaler, uint256 _adapterVolumeScaler) external;\n  function setDelegate(address _user, address _delegate) external;\n  function setAdapterDelegate(address _adapter, address _delegate) external;\n  function addVolume(address _add, uint256 _volume) external;\n  function addAdapterVolume(address _adapter, uint256 _volume) external;\n  function transferVolume(address _from, address _to, uint256 _selfVolume, uint256 _refVolume, uint256 _adapterVolume) external;\n  function getVolume(address _add) external view returns (uint256 selfVolume, uint256 refVolume, uint256 adapterVolume);\n  function getPoints(address _add) external view returns (uint256 pointsFromSelf, uint256 pointsFromRef, uint256 pointsFromAdapter, uint256 pointsTotal);\n}\n"
    },
    "src/contracts/interface/ISummitReferrals.sol": {
      "content": "//\n//            __               ___ ___    __            _  \n//           (_  | | |\\/| |\\/|  |   |    (_ \\    / /\\  |_) \n//           __) |_| |  | |  | _|_  |    __) \\/\\/ /--\\ |   \n//\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISummitReferrals {\n\n  event UpdatedPointsContract(address indexed _pointsContract);\n  event BoostedReferrer(address indexed referrer, uint256 _boostLevel);\n  event UpdatedReferrer(address indexed _add, address indexed _referrer);\n  event UpdatedLevelData(uint256[] _refPointsReq, uint256[] _selfPointsReq, uint256[] _refsReq, uint256[] _multRew, uint256 _hasReferrerBonusMult);\n\n  function setPointsContract(address _pointsContract) external;\n  function setReferrer(address _referrer, string memory _code) external;\n  function setReferralCode(string memory _code) external;\n  function boostReferrer(address _referrer, uint8 _boostLevel) external;\n  function setLevelData(uint256[] memory _refPointsReq, uint256[] memory _selfPointsReq, uint256[] memory _refsReq, uint256[] memory _multRew, uint256 _hasReferrerBonusMult) external;\n  function getReferrer(address _add) external view returns (address);\n  function getRefsCount(address _add) external view returns (uint256);\n  function getReferrerLevel(address _add) external view returns (uint8);\n  function getLevelRequirements(uint8 _level) external view returns (uint256 selfVolume, uint256 refVolume, uint256 refsCount);\n  function getRefVolumeMultiplier(address _add) external view returns (uint256);\n  function getSelfVolumeMultiplier(address _add) external view returns (uint256);\n}"
    },
    "src/contracts/interface/ISummitRouter.sol": {
      "content": "//\n//            __               ___ ___    __            _  \n//           (_  | | |\\/| |\\/|  |   |    (_ \\    / /\\  |_) \n//           __) |_| |  | |  | _|_  |    __) \\/\\/ /--\\ |   \n//\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n\nstruct Query {\n    address adapter;\n    address tokenIn;\n    address tokenOut;\n    uint256 amountOut;\n}\nstruct Offer {\n    bytes amounts;\n    bytes adapters;\n    bytes path;\n    uint256 gasEstimate;\n}\nstruct FormattedOffer {\n    uint256[] amounts;\n    address[] adapters;\n    address[] path;\n    uint256 gasEstimate;\n}\nstruct Trade {\n    uint256 amountIn;\n    uint256 amountOut;\n    address[] path;\n    address[] adapters;\n}\n\ninterface ISummitRouter {\n\n    event UpdatedTrustedTokens(address[] _newTrustedTokens);\n    event UpdatedTokenVolumeMultipliers(address[] _tokens, uint256[] _pointMultipliers);\n    event UpdatedAdapters(address[] _newAdapters);\n    event UpdatedVolumeAdapter(address _volumeAdapter);\n    event UpdatedMinFee(uint256 _oldMinFee, uint256 _newMinFee);\n    event UpdatedFeeClaimer(address _oldFeeClaimer, address _newFeeClaimer);\n    event SummitSwap(address indexed _tokenIn, address indexed _tokenOut, uint256 _amountIn, uint256 _amountOut);\n\n    // admin\n    function setTrustedTokens(address[] memory _trustedTokens) external;\n    function setAdapters(address[] memory _adapters) external;\n    function setVolumeAdapter(address _volumeAdapter) external;\n    function setFeeClaimer(address _claimer) external;\n    function setMinFee(uint256 _fee) external;\n\n    // misc\n    function trustedTokensCount() external view returns (uint256);\n    function adaptersCount() external view returns (uint256);\n\n    // query\n\n    function queryAdapter(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8 _index\n    ) external returns (uint256);\n\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint8[] calldata _options\n    ) external view returns (Query memory);\n\n    function queryNoSplit(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) external view returns (Query memory);\n\n    function findBestPathWithGas(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps,\n        uint256 _gasPrice\n    ) external view returns (FormattedOffer memory);\n\n    function findBestPath(\n        uint256 _amountIn,\n        address _tokenIn,\n        address _tokenOut,\n        uint256 _maxSteps\n    ) external view returns (FormattedOffer memory);\n\n    // swap\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external;\n\n    function swapNoSplitFromNATIVE(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external payable;\n\n    function swapNoSplitToNATIVE(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external; \n\n    function swapNoSplitWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external;\n\n    function swapNoSplitToNATIVEWithPermit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee,\n        uint256 _deadline,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external;\n\n}"
    },
    "src/contracts/interface/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\ninterface IWETH is IERC20 {\n    function withdraw(uint256 amount) external;\n\n    function deposit() external payable;\n}\n"
    },
    "src/contracts/lib/Maintainable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which extends the basic access control mechanism of Ownable\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\n * remove.\n *\n * By default, the owner account will be the one that deploys the contract. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available this modifier:\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\n * the accounts with the role of maintainer.\n */\n\nabstract contract Maintainable is AccessControl {\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\"MAINTAINER_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _setupRole(MAINTAINER_ROLE, msg.sender);\n    }\n\n    function addMaintainer(address addedMaintainer) public virtual {\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\n    }\n\n    function removeMaintainer(address removedMaintainer) public virtual {\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\n    }\n\n    function renounceRole(bytes32 role) public virtual {\n        renounceRole(role, msg.sender);\n    }\n\n    function transferOwnership(address newOwner) public virtual {\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\n        renounceRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    modifier onlyMaintainer() {\n        require(hasRole(MAINTAINER_ROLE, msg.sender), \"Maintainable: Caller is not a maintainer\");\n        _;\n    }\n}\n"
    },
    "src/contracts/lib/Recoverable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./SafeERC20.sol\";\nimport \"./Maintainable.sol\";\n\n\nabstract contract Recoverable is Maintainable {\n    using SafeERC20 for IERC20;\n\n    event Recovered(\n        address indexed _asset, \n        uint amount\n    );\n\n    /**\n     * @notice Recover ERC20 from contract\n     * @param _tokenAddress token address\n     * @param _tokenAmount amount to recover\n     */\n    function recoverERC20(address _tokenAddress, uint _tokenAmount) external onlyMaintainer {\n        require(_tokenAmount > 0, \"Nothing to recover\");\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\n        emit Recovered(_tokenAddress, _tokenAmount);\n    }\n\n    /**\n     * @notice Recover native asset from contract\n     * @param _amount amount\n     */\n    function recoverNATIVE(uint _amount) external onlyMaintainer {\n        require(_amount > 0, \"Nothing to recover\");\n        payable(msg.sender).transfer(_amount);\n        emit Recovered(address(0), _amount);\n    }\n\n}"
    },
    "src/contracts/lib/SafeERC20.sol": {
      "content": "// This is a simplified version of OpenZepplin's SafeERC20 library\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"../interface/IERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/contracts/lib/SummitViewUtils.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\npragma solidity >=0.8.4;\n\nimport { Offer, FormattedOffer } from \"../interface/ISummitRouter.sol\";\nimport \"./TypeConversion.sol\";\n\n\nlibrary OfferUtils {\n    using TypeConversion for address;\n    using TypeConversion for uint256;\n    using TypeConversion for bytes;\n\n    function newOffer(\n        uint _amountIn,\n        address _tokenIn\n    ) internal pure returns (Offer memory offer) {\n        offer.amounts = _amountIn.toBytes();\n        offer.path = _tokenIn.toBytes();\n    }\n\n    /**\n     * Makes a deep copy of Offer struct\n     */\n    function clone(Offer memory _queries) internal pure returns (Offer memory) {\n        return Offer(_queries.amounts, _queries.adapters, _queries.path, _queries.gasEstimate);\n    }\n\n    /**\n     * Appends new elements to the end of Offer struct\n     */\n    function addToTail(\n        Offer memory _queries,\n        uint256 _amount,\n        address _adapter,\n        address _tokenOut,\n        uint256 _gasEstimate\n    ) internal pure {\n        _queries.path = bytes.concat(_queries.path, _tokenOut.toBytes());\n        _queries.adapters = bytes.concat(_queries.adapters, _adapter.toBytes());\n        _queries.amounts = bytes.concat(_queries.amounts, _amount.toBytes());\n        _queries.gasEstimate += _gasEstimate;\n    }\n\n    /**\n     * Formats elements in the Offer object from byte-arrays to integers and addresses\n     */\n    function format(Offer memory _queries) internal pure returns (FormattedOffer memory) {\n        return\n            FormattedOffer(\n                _queries.amounts.toUints(),\n                _queries.adapters.toAddresses(),\n                _queries.path.toAddresses(),\n                _queries.gasEstimate\n            );\n    }\n\n    function getTokenOut(\n        Offer memory _offer\n    ) internal pure returns (address tokenOut) {\n        tokenOut = _offer.path.toAddress(_offer.path.length);  // Last 32 bytes\n    }\n\n    function getAmountOut(\n        Offer memory _offer\n    ) internal pure returns (uint amountOut) {\n        amountOut = _offer.amounts.toUint(_offer.path.length);  // Last 32 bytes\n    }\n\n}\n\nlibrary FormattedOfferUtils {\n    using TypeConversion for address;\n    using TypeConversion for uint256;\n    using TypeConversion for bytes;\n\n    /**\n     * Appends new elements to the end of FormattedOffer\n     */\n    function addToTail(\n        FormattedOffer memory offer, \n        uint256 amountOut, \n        address wrapper,\n        address tokenOut,\n        uint256 gasEstimate\n    ) internal pure {\n        offer.amounts = bytes.concat(abi.encodePacked(offer.amounts), amountOut.toBytes()).toUints();\n        offer.adapters = bytes.concat(abi.encodePacked(offer.adapters), wrapper.toBytes()).toAddresses();\n        offer.path = bytes.concat(abi.encodePacked(offer.path), tokenOut.toBytes()).toAddresses();\n        offer.gasEstimate += gasEstimate;\n    }\n\n    /**\n     * Appends new elements to the beginning of FormattedOffer\n     */\n    function addToHead(\n        FormattedOffer memory offer, \n        uint256 amountOut, \n        address wrapper,\n        address tokenOut,\n        uint256 gasEstimate\n    ) internal pure {\n        offer.amounts = bytes.concat(amountOut.toBytes(), abi.encodePacked(offer.amounts)).toUints();\n        offer.adapters = bytes.concat(wrapper.toBytes(), abi.encodePacked(offer.adapters)).toAddresses();\n        offer.path = bytes.concat(tokenOut.toBytes(), abi.encodePacked(offer.path)).toAddresses();\n        offer.gasEstimate += gasEstimate;\n    }\n\n    function getAmountOut(FormattedOffer memory offer) internal pure returns (uint256) {\n        return offer.amounts[offer.amounts.length - 1];\n    }\n\n}"
    },
    "src/contracts/lib/TypeConversion.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\n\nlibrary TypeConversion {\n\n    function toBytes12(address x) internal pure returns (bytes12 y) {\n        assembly { y := x }\n    }\n\n    function toBytes32(address x) internal pure returns (bytes32 y) {\n        assembly { y := x }\n    }\n\n    function toAddress(bytes32 x) internal pure returns (address y) {\n        assembly { y := x }\n    }\n\n    function toBytes(address x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toBytes(bytes32 x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toBytes(uint x) internal pure returns (bytes memory y) {\n        y = new bytes(32);\n        assembly { mstore(add(y, 32), x) }\n    }\n\n    function toAddress(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (address y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toUint(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (uint y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toBytes12(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (bytes12 y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toBytes32(\n        bytes memory x,\n        uint offset\n    ) internal pure returns (bytes32 y) {\n        assembly { y := mload(add(x, offset)) }\n    }\n\n    function toAddresses(\n        bytes memory xs\n    ) internal pure returns (address[] memory ys) {\n        ys = new address[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toAddress(xs, i*32 + 32);\n        }\n    }\n\n    function toUints(\n        bytes memory xs\n    ) internal pure returns (uint[] memory ys) {\n        ys = new uint[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toUint(xs, i*32 + 32);\n        }\n    }\n\n    function toBytes32s(\n        bytes memory xs\n    ) internal pure returns (bytes32[] memory ys) {\n        ys = new bytes32[](xs.length/32);\n        for (uint i=0; i < xs.length/32; i++) {\n            ys[i] = toBytes32(xs, i*32 + 32);\n        }\n    }\n\n}\n"
    },
    "src/contracts/SummitOracle.sol": {
      "content": "//\n//            __               ___ ___    __            _  \n//           (_  | | |\\/| |\\/|  |   |    (_ \\    / /\\  |_) \n//           __) |_| |  | |  | _|_  |    __) \\/\\/ /--\\ |   \n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"./interface/ISummitRouter.sol\";\nimport \"./interface/IAdapter.sol\";\nimport \"./interface/IERC20.sol\";\nimport \"./interface/IWETH.sol\";\nimport \"./lib/SafeERC20.sol\";\nimport \"./lib/Maintainable.sol\";\nimport \"./lib/SummitViewUtils.sol\";\nimport \"./lib/Recoverable.sol\";\nimport \"./lib/SafeERC20.sol\";\n\n\ncontract SummitOracle is Maintainable, Recoverable {\n    using SafeERC20 for IERC20;\n    using FormattedOfferUtils for FormattedOffer;\n\n    ISummitRouter public ROUTER;\n    IERC20 public STABLE;\n    IERC20 public WNATIVE;\n\n    constructor(\n      address _router,\n      address _stable,\n      address _wNative\n    ) {\n      ROUTER = ISummitRouter(_router);\n      STABLE = IERC20(_stable);\n      WNATIVE = IERC20(_wNative);\n    }\n\n\n    function setRouter(address _router) public onlyMaintainer {\n      ROUTER = ISummitRouter(_router);\n    }\n    function setStable(address _stable) public onlyMaintainer {\n      STABLE = IERC20(_stable);\n    }\n    function setWNative(address _wNative) public onlyMaintainer {\n      WNATIVE = IERC20(_wNative);\n    }\n    \n\n    function _getSymbol(address _token) internal view returns (string memory) {\n      if (_token == address(0)) return \"\";\n      try IERC20(_token).symbol() returns (string memory sym) {\n        return sym;\n      } catch {\n        return \"\";\n      }\n    }\n    function _getDecimals(address _token) internal view returns (uint8) {\n      if (_token == address(0)) return 18;\n      try IERC20(_token).decimals() returns (uint8 dec) {\n        return dec;\n      } catch {\n        return 18;\n      }\n    }\n    function _getAllowance(address _user, address _token) internal view returns (uint256) {\n      if (_user == address(0)) return 0;\n      if (_token == address(0)) return _user.balance;\n      return IERC20(_token).allowance(_user, address(ROUTER));\n    }\n    function _getBalance(address _user, address _token) internal view returns (uint256) {\n      if (_user == address(0)) return 0;\n      if (_token == address(0)) return _user.balance;\n      return IERC20(_token).balanceOf(_user);\n    }\n\n    function getPrice10Stable(address _token) public view returns (uint256) {\n      try ROUTER.findBestPath(\n        10 ** STABLE.decimals(),\n        address(STABLE),\n        _token == address(0) ? address(WNATIVE) : _token,\n        3\n      ) returns (FormattedOffer memory formattedOffer) {\n        return formattedOffer.getAmountOut();\n      } catch {\n        return 0;\n      }\n    }\n\n    struct TokenData {\n      address tokenAddress;\n      string symbol;\n      uint256 decimals;\n      uint256 userAllowance;\n      uint256 userBalance;\n      uint256 price;\n    }\n\n    function getTokenData(address _user, address _token) public view returns (TokenData memory token) {\n      uint256 price = getPrice10Stable(_token);\n      token = TokenData({\n        tokenAddress: _token,\n        symbol: _getSymbol(_token),\n        decimals: _getDecimals(_token),\n        price: price,\n        userAllowance: _getAllowance(_user, _token),\n        userBalance: _getBalance(_user, _token)\n      });\n    }\n\n    function getSwapData(uint256 _amountIn, address _tokenIn, address _tokenOut, uint256 _maxSteps)\n      public view\n      returns (FormattedOffer memory offer)\n    {\n      return (\n        ROUTER.findBestPath(\n          _amountIn,\n          _tokenIn == address(0) ? address(WNATIVE) : _tokenIn,\n          _tokenOut == address(0) ? address(WNATIVE) : _tokenOut,\n          _maxSteps\n        )\n      );\n    }\n\n\n}\n"
    },
    "src/contracts/SummitReferrals.sol": {
      "content": "//\n//            __               ___ ___    __            _  \n//           (_  | | |\\/| |\\/|  |   |    (_ \\    / /\\  |_) \n//           __) |_| |  | |  | _|_  |    __) \\/\\/ /--\\ |   \n//\n\n// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"./interface/ISummitReferrals.sol\";\nimport \"./interface/ISummitPoints.sol\";\nimport \"./interface/IBlast.sol\";\nimport \"./lib/Maintainable.sol\";\n\n// | Level    | Custom Benefit  | Reward  | Self Volume Required  | Referred Volume Required  | Referral Num Required   |\n// | ---      | ---             | ---     | ---                   | ---                       | ---                     |\n// | Wood     |                 | 0       | 0                     | 0                         | 0                       |\n// | Bronze   | Can refer       | 2%      | 100                   | 0                         | 0                       |\n// | Silver   |                 | 4%      | 1000                  | 10000                     | 3                       |\n// | Gold     |                 | 5%      | 2000                  | 25000                     | 5                       |\n// | Platinum |                 | 7%      | 5000                  | 100000                    | 10                      |\n// | Noble    |                 | 15%     | 25000                 | 1000000                   | 25                      |\n\ncontract SummitReferrals is Maintainable, ISummitReferrals {\n    using SafeMath for uint256;\n\n    address public SUMMIT_POINTS;\n\n    // Level requirements\n    uint256 public levelCount = 6;\n    mapping(uint256 => uint256) public LEVEL_REF_VOLUME_REQ; // = [0, 0, 10000e18, 25000e18, 100000e18, 1000000e18];\n    mapping(uint256 => uint256) public LEVEL_SELF_VOLUME_REQ; // = [0, 100e18, 1000e18, 2000e18, 5000e18, 25000e18];\n    mapping(uint256 => uint256) public LEVEL_REFS_REQ; // = [0, 0, 3, 5, 10, 25];\n\n    mapping(uint256 => uint256) public LEVEL_MULT_REWARD; // = [0, 200, 400, 500, 700, 1500];\n\n    uint256 public BONUS_FOR_BEING_REFERRED = 200;\n    mapping(address => address) public REFERRER;\n    mapping(address => uint256) public REF_COUNT;\n    mapping(address => uint8) public REF_BOOST_LEVEL;\n    mapping(string => address) public REF_CODE;\n    mapping(address => string) public REF_CODE_INV;\n\n    error AlreadyInitialized();\n    error MissingReferral();\n    error AlreadyReferredByUser();\n    error SelfReferral();\n    error ReciprocalReferral();\n    error LengthMismatch();\n    error CodeNotAvailable();\n    error MustBeAtLeastBronze();\n    error InvalidLevel();\n\n    constructor() {\n      uint256[6] memory refVolumeReq = [uint256(0), 0, 10000e18, 25000e18, 100000e18, 1000000e18];\n      uint256[6] memory selfVolumeReq = [uint256(0), 100e18, 1000e18, 2000e18, 5000e18, 25000e18];\n      uint256[6] memory refsReq = [uint256(0), 0, 3, 5, 10, 25];\n      uint256[6] memory multReward = [uint256(0), 200, 400, 500, 700, 1500];\n\n      for (uint256 i = 0; i < levelCount; i++) {\n        LEVEL_REF_VOLUME_REQ[i] = refVolumeReq[i];\n        LEVEL_SELF_VOLUME_REQ[i] = selfVolumeReq[i];\n        LEVEL_REFS_REQ[i] = refsReq[i];\n        LEVEL_MULT_REWARD[i] = multReward[i];\n      }\n    }\n\n    bool public initialized = false;\n    address public governor;\n    function initialize(address _governor) public onlyMaintainer {\n      if (initialized) revert AlreadyInitialized();\n      initialized = true;\n\n      // __BLAST__\n      // IBlast blast = IBlast(0x4300000000000000000000000000000000000002);\n      // __BLAST__\n      // blast.configureClaimableGas();\n      // __BLAST__\n      // blast.configureGovernor(_governor);\n      governor = _governor;\n    }\n\n\n    function setPointsContract(address _pointsContract) override public onlyMaintainer {\n      emit UpdatedPointsContract(_pointsContract);\n      SUMMIT_POINTS = _pointsContract;\n    }\n\n    function stringEquals(string memory s1, string memory s2) internal pure returns(bool) {\n        return keccak256(abi.encode(s1)) == keccak256(abi.encode(s2));\n    }\n\n    function setReferrer(address _referrer, string memory _code) override public {\n      // Get referrer from code or argument\n      address referrer = _referrer == address(0) ? REF_CODE[_code] : _referrer;\n\n      // Checks\n      if (referrer == address(0)) revert MissingReferral();\n      if (referrer == msg.sender) revert SelfReferral();\n      if (referrer == REFERRER[msg.sender]) revert AlreadyReferredByUser();\n      if (REFERRER[referrer] == msg.sender) revert ReciprocalReferral();\n      if (REFERRER[REFERRER[referrer]] == msg.sender) revert ReciprocalReferral();\n\n      // Validate referrer is at least bronze level\n      if (getReferrerLevel(referrer) == 0) revert MustBeAtLeastBronze();\n\n      // Remove from prev referrer count\n      if (REFERRER[msg.sender] != address(0) && REF_COUNT[REFERRER[msg.sender]] >= 1) {\n        REF_COUNT[REFERRER[msg.sender]] -= 1;\n      }\n\n      REFERRER[msg.sender] = referrer;\n      REF_COUNT[referrer] += 1;\n\n      emit UpdatedReferrer(msg.sender, referrer);\n    }\n\n    function setReferralCode(string memory _code) override public {\n      // Validate referrer is at least bronze level\n      if (getReferrerLevel(msg.sender) == 0) revert MustBeAtLeastBronze();\n\n      // If code is already being used\n      if (REF_CODE[_code] != address(0)) revert CodeNotAvailable();\n\n      REF_CODE[REF_CODE_INV[msg.sender]] = address(0);\n      REF_CODE_INV[msg.sender] = _code;\n      REF_CODE[_code] = msg.sender;\n    }\n\n    function boostReferrer(address _referrer, uint8 _boostLevel) override public onlyMaintainer {\n      REF_BOOST_LEVEL[_referrer] = _boostLevel;\n      emit BoostedReferrer(_referrer, _boostLevel);\n    }\n\n    function setLevelData(uint256[] memory _refVolumeReq, uint256[] memory _selfVolumeReq, uint256[] memory _refsReq, uint256[] memory _multReward, uint256 _hasReferrerBonusMult) override public onlyMaintainer {\n      if (_refVolumeReq.length != _selfVolumeReq.length || _refVolumeReq.length != _refsReq.length || _refVolumeReq.length != _multReward.length) revert LengthMismatch();\n\n      uint256 newLength = _refVolumeReq.length;\n\n      for (uint256 i = 0; i < newLength; i++) {\n        LEVEL_REF_VOLUME_REQ[i] = _refVolumeReq[i];\n        LEVEL_SELF_VOLUME_REQ[i] = _selfVolumeReq[i];\n        LEVEL_REFS_REQ[i] = _refsReq[i];\n        LEVEL_MULT_REWARD[i] = _multReward[i];\n      }\n\n      levelCount = newLength;\n\n      BONUS_FOR_BEING_REFERRED = _hasReferrerBonusMult;\n      emit UpdatedLevelData(_refVolumeReq, _selfVolumeReq, _refsReq, _multReward, _hasReferrerBonusMult);\n    }\n\n    function getReferrer(address _add) override public view returns (address) {\n      return REFERRER[_add];\n    }\n\n    function getReferrerLevel(address _add) override public view returns (uint8) {\n      if (REF_BOOST_LEVEL[_add] > 0) {\n        return REF_BOOST_LEVEL[_add] > (levelCount - 1) ? uint8(levelCount - 1) : REF_BOOST_LEVEL[_add];\n      }\n      if (SUMMIT_POINTS == address(0)) return 0;\n\n      (uint256 _selfVolume, uint256 _refVolume,) = ISummitPoints(SUMMIT_POINTS).getVolume(_add);\n\n      for (uint8 i = 0; i < levelCount; i++) {\n        if (_selfVolume < LEVEL_SELF_VOLUME_REQ[i + 1]) return i;\n        if (_refVolume < LEVEL_REF_VOLUME_REQ[i + 1]) return i;\n        if (REF_COUNT[_add] < LEVEL_REFS_REQ[i + 1]) return i;\n      }\n\n      return uint8(levelCount);\n    }\n\n    function getLevelRequirements(uint8 _level) override public view returns (uint256 selfVolume, uint256 refVolume, uint256 refsCount) {\n      if (_level >= levelCount) revert InvalidLevel();\n      return (\n        LEVEL_SELF_VOLUME_REQ[_level],\n        LEVEL_REF_VOLUME_REQ[_level],\n        LEVEL_REFS_REQ[_level]\n      );\n    }\n\n    function getRefsCount(address _add) override public view returns (uint256) {\n      return REF_COUNT[_add];\n    }\n\n    function getRefVolumeMultiplier(address _add) override public view returns (uint256) {\n      return 10000 + (LEVEL_MULT_REWARD[getReferrerLevel(_add)]);\n    }\n\n    function getSelfVolumeMultiplier(address _add) override public view returns (uint256) {\n      return 10000 + (REFERRER[_add] != address(0) ? BONUS_FOR_BEING_REFERRED : 0);\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}